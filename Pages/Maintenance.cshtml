@page
@model ApplicationDeployment.Pages.MaintenanceModel
@using System.Text.Json

<h1 class="mb-3">Maintenance — Deployed Applications</h1>

<form id="maintenanceForm" onsubmit="return false;">
    @Html.AntiForgeryToken()
    <div class="row g-4">
        <!-- Replace the server list section -->
        <div class="col-lg-3">
            <div class="card h-100 shadow-sm">
                <div class="card-header bg-light">
                    <span class="fw-semibold"><i class="fas fa-server me-2"></i>Servers</span>
                </div>
                <div class="card-body p-2">
                    <div class="list-group list-group-flush" id="serversList">
                        @foreach (var s in Model.Servers)
                        {
                            <button type="button" 
                                    class="list-group-item list-group-item-action d-flex justify-content-between align-items-center server-btn"
                                    data-server="@s.Value">
                                <span class="text-truncate">@s.Text</span>
                                <i class="fas fa-chevron-right text-muted"></i>
                            </button>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="col-lg-6">
            <div class="card h-100 shadow-sm">
                <div class="card-header">Deployments on Selected Server</div>
                <div class="card-body p-2">
                    <div id="deploymentsContainer" class="row g-3">
                        <div class="col-12 text-muted">Select a server to view deployments.</div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-lg-3">
            <div class="card h-100 shadow-sm">
                <div class="card-header">Actions</div>
                <div class="card-body d-flex flex-column">
                    <div id="selectedInfo" class="mb-3 small text-muted">No selection</div>
                    <button type="button" id="removeSelectedBtn" class="btn btn-danger mb-2" disabled>Remove Selected Build</button>
                    <button type="button" id="removeAppBtn" class="btn btn-outline-danger mb-2" disabled>Remove Entire App</button>
                    <div id="maintenanceStatus" class="small text-muted mt-auto">Ready</div>
                </div>
            </div>
        </div>
    </div>
</form>

<!-- Confirmation modal (Bootstrap) -->
<div class="modal fade" id="confirmModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Confirm Remove</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p id="confirmMessage">This will delete the path:</p>
        <pre id="confirmPath" class="small bg-light p-2 rounded"></pre>
        <div class="form-check">
            <input class="form-check-input" type="checkbox" id="confirmReally" />
            <label class="form-check-label" for="confirmReally">I understand this will permanently delete the folder.</label>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" id="confirmCancel" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" id="confirmOk" class="btn btn-danger" disabled>Delete</button>
      </div>
    </div>
  </div>
</div>

@section Scripts {
<script>
document.addEventListener('DOMContentLoaded', () => {
    // Add error handling for Bootstrap
    if (typeof bootstrap === 'undefined') {
        console.error('Bootstrap not loaded');
        alert('Error: Bootstrap library not loaded. Please refresh the page.');
        return;
    }

    // Utility function for escaping HTML
    function escapeHtml(unsafe) {
        if (unsafe == null) return '';
        return unsafe
            .toString()
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }

    // Get elements
    const serversList = document.getElementById('serversList');
    const deploymentsContainer = document.getElementById('deploymentsContainer');
    const selectedInfo = document.getElementById('selectedInfo');
    const removeSelectedBtn = document.getElementById('removeSelectedBtn');
    const removeAppBtn = document.getElementById('removeAppBtn');
    const status = document.getElementById('maintenanceStatus');

    // Track global state
    let currentServer = null;
    let selectedBuilds = new Set();

    // Modal elements - MOVED INSIDE DOMContentLoaded
    const confirmModalEl = document.getElementById('confirmModal');
    const confirmModal = new bootstrap.Modal(confirmModalEl);
    const confirmPath = document.getElementById('confirmPath');
    const confirmReally = document.getElementById('confirmReally');
    const confirmOk = document.getElementById('confirmOk');

    function renderDeployments(data) {
        deploymentsContainer.innerHTML = '';
        if (!data || data.length === 0) {
            deploymentsContainer.innerHTML = '<div class="col-12 text-muted">No deployments found on this server.</div>';
            return;
        }

        data.forEach(group => {
            const col = document.createElement('div');
            col.className = 'col-12 mb-3';
            
            const card = document.createElement('div');
            card.className = 'card shadow-sm';
            
            // Card header with app name and select all
            const header = document.createElement('div');
            header.className = 'card-header d-flex justify-content-between align-items-center bg-light';
            header.innerHTML = `
                <div class="d-flex align-items-center">
                    <span class="fw-semibold">${escapeHtml(group.app)}</span>
                    <span class="badge bg-primary ms-2">${group.builds.length}</span>
                </div>
                <div class="form-check form-check-inline m-0">
                    <input type="checkbox" class="form-check-input select-all-builds" 
                           data-app="${escapeHtml(group.app)}" 
                           id="selectAll_${escapeHtml(group.app)}" />
                    <label class="form-check-label small" for="selectAll_${escapeHtml(group.app)}">Select All</label>
                </div>`;
        
            // Card body with builds list
            const body = document.createElement('div');
            body.className = 'card-body p-2';
            body.innerHTML = `
                <div style="max-height:220px; overflow-y:auto">
                    <ul class="list-group list-group-flush" data-app="${escapeHtml(group.app)}">
                        ${group.builds.map(build => `
                            <li class="list-group-item py-2 px-3 d-flex justify-content-between align-items-center build-row">
                                <div class="form-check mb-0">
                                    <input type="checkbox" class="form-check-input build-checkbox" 
                                           data-app="${escapeHtml(group.app)}" 
                                           data-build="${escapeHtml(build)}"
                                           id="build_${escapeHtml(group.app)}_${escapeHtml(build)}" />
                                    <label class="form-check-label small text-wrap" for="build_${escapeHtml(group.app)}_${escapeHtml(build)}">
                                        ${escapeHtml(build)}
                                    </label>
                                </div>
                                <span class="badge bg-light text-dark small">
                                    ${new Date(group.builds[build]?.created || null).toLocaleDateString() || ''}
                                </span>
                            </li>`).join('')}
                    </ul>
                </div>`;

        card.appendChild(header);
        card.appendChild(body);
        col.appendChild(card);
        deploymentsContainer.appendChild(col);
    });

    function updateBuildSelection(checkbox) {
        const app = checkbox.dataset.app;
        const build = checkbox.dataset.build;
        const key = `${app}|${build}`;

        if (checkbox.checked) {
            selectedBuilds.add(key);
        } else {
            selectedBuilds.delete(key);
        }

        // Update select-all checkbox state
        const appCheckboxes = document.querySelectorAll(`.build-checkbox[data-app="${app}"]`);
        const selectAllCheckbox = document.querySelector(`.select-all-builds[data-app="${app}"]`);
        if (selectAllCheckbox) {
            const allChecked = Array.from(appCheckboxes).every(cb => cb.checked);
            const someChecked = Array.from(appCheckboxes).some(cb => cb.checked);
            selectAllCheckbox.checked = allChecked;
            selectAllCheckbox.indeterminate = someChecked && !allChecked;
        }

        // Update UI
        removeSelectedBtn.disabled = selectedBuilds.size === 0;
        selectedInfo.textContent = selectedBuilds.size > 0 
            ? `Selected: ${selectedBuilds.size} build(s)` 
            : 'No selection';
    }

    async function loadDeployments(server) {
        console.log(`Loading deployments for ${server}...`);
        status.textContent = 'Loading deployments...';

        try {
            const resp = await fetch(`/Maintenance?handler=Deployments&server=${encodeURIComponent(server)}`, { 
                cache: 'no-store',
                headers: { 
                    'Accept': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                }
            });

            if (!resp.ok) {
                throw new Error(`HTTP ${resp.status}`);
            }

            const data = await resp.json();
            console.log('Server returned:', data);

            if (data.error) {
                deploymentsContainer.innerHTML = `
                    <div class="col-12">
                        <div class="alert alert-warning">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            ${data.error}
                            ${data.path ? `<div class="small mt-2 text-muted">${data.path}</div>` : ''}
                        </div>
                    </div>`;
                status.textContent = 'No access';
                return;
            }

            if (!Array.isArray(data)) {
                throw new Error('Invalid data format received');
            }

            if (data.length === 0) {
                deploymentsContainer.innerHTML = `
                    <div class="col-12">
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle me-2"></i>
                            No deployments found on this server.
                        </div>
                    </div>`;
                status.textContent = 'No deployments';
                return;
            }

            renderDeployments(data);
            status.textContent = `Loaded ${data.length} applications`;
        } catch (e) {
            console.error('Failed to load deployments:', e);
            deploymentsContainer.innerHTML = `
                <div class="col-12">
                    <div class="alert alert-danger">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        Error loading deployments: ${e.message}
                    </div>
                </div>`;
            status.textContent = 'Error';
        }
    }

    // Function to remove selected builds
    async function removeSelectedBuilds() {
        if (selectedBuilds.size === 0) return;
        
        status.textContent = `Removing ${selectedBuilds.size} builds...`;
        let completed = 0;
        
        for (const selection of selectedBuilds) {
            const [app, build] = selection.split('|');
            try {
                await postRemove(currentServer, app, build, false);
                completed++;
                status.textContent = `Removed ${completed} of ${selectedBuilds.size}...`;
            } catch (e) {
                console.error(`Failed to remove ${app}/${build}:`, e);
            }
        }
        
        // Clear selections and refresh
        selectedBuilds.clear();
        await loadDeployments(currentServer);
        selectedInfo.textContent = 'No selection';
        removeSelectedBtn.disabled = true;
        status.textContent = `Completed: ${completed} builds removed`;
    }

    // Function to make the actual remove request
    async function postRemove(server, app, build, removeApp) {
        const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
        const token = tokenInput?.value;
        
        const body = new URLSearchParams();
        body.append('server', server);
        body.append('app', app);
        if (build) body.append('build', build);
        body.append('removeApp', removeApp ? 'true' : 'false');
        
        const resp = await fetch('/Maintenance?handler=Remove', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'RequestVerificationToken': token
            },
            body: body.toString()
        });
        
        const payload = await resp.json();
        if (!resp.ok || !payload?.success) {
            throw new Error(payload?.message || `HTTP ${resp.status}`);
        }
        
        return payload;
    }

    // Add some style to the page
    const style = document.createElement('style');
    style.textContent = `
        .build-row:hover { background-color: rgba(0,0,0,.02); }
        .build-checkbox:checked + label { font-weight: 500; color: var(--bs-primary); }
        .card-header .form-check-input:indeterminate {
            background-color: var(--bs-primary);
            border-color: var(--bs-primary);
        }
    `;
    document.head.appendChild(style);

    // Wire up server selection
    serversList?.addEventListener('click', async (ev) => {
        const btn = ev.target.closest('.server-btn');
        if (!btn) return;

        currentServer = btn.dataset.server;
        console.log('Selected server:', currentServer);

        // Update UI
        serversList.querySelectorAll('.server-btn').forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        
        selectedBuilds.clear();
        selectedInfo.textContent = `Server: ${currentServer}`;
        removeSelectedBtn.disabled = true;
        removeAppBtn.disabled = true;

        await loadDeployments(currentServer);
    });

    // Handle "Remove Selected Build" button click - MOVED INSIDE DOMContentLoaded
    removeSelectedBtn.addEventListener('click', () => {
        if (selectedBuilds.size === 0) return;
        
        // Show confirmation modal with paths
        const paths = Array.from(selectedBuilds).map(sel => {
            const [app, build] = sel.split('|');
            return `\\\\${currentServer}\\C$\\CSTApps\\${app}\\${build}`;
        });
        
        confirmPath.innerHTML = paths.map(p => `<div>${escapeHtml(p)}</div>`).join('');
        confirmReally.checked = false;
        confirmOk.disabled = true;
        
        const confirmMessage = document.getElementById('confirmMessage');
        confirmMessage.textContent = `This will delete ${paths.length} build(s):`;
        
        confirmModal.show();
    });

    // Handle modal confirmation checkbox - MOVED INSIDE DOMContentLoaded
    confirmReally.addEventListener('change', () => {
        confirmOk.disabled = !confirmReally.checked;
    });

    // Handle modal OK button - MOVED INSIDE DOMContentLoaded
    confirmOk.addEventListener('click', async () => {
        confirmModal.hide();
        await removeSelectedBuilds();
    });

}); // END of DOMContentLoaded
</script>
}