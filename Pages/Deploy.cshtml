@page
@model ApplicationDeployment.Pages.DeployModel
@using System.Text.Json

<form id="deploymentForm" method="post" onsubmit="event.preventDefault(); startCopy();" class="container my-4">
    @Html.AntiForgeryToken()
    <input type="hidden" id="hubConnectionId" name="HubConnectionId" />
    <h1 class="display-5 text-primary mb-4">Application Deployment</h1>

    <div class="row g-4">
        <div class="col-lg-3">
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-light fw-semibold">Destination Servers</div>
                <div class="card-body d-flex flex-column">
                    <label class="form-label small">Servers</label>
                    <div class="table-responsive" style="max-height:300px; overflow:auto;">
                        <table class="table table-sm table-hover mb-2">
                            <thead class="table-light sticky-top">
                                <tr>
                                    <th scope="col">
                                        <input type="checkbox" id="selectAllServers" class="form-check-input" title="Select All">
                                    </th>
                                    <th scope="col">Host</th>
                                    <th scope="col">User</th>
                                    <th scope="col">Description</th>
                                </tr>
                            </thead>
                            <tbody id="serversTableBody">
                                @foreach (var server in Model.ServerList)
                                {
                                    <tr class="server-row" data-hostname="@server.HostName">
                                        <td>
                                            <input type="checkbox" class="form-check-input server-checkbox"
                                                   name="SelectedServers" value="@server.HostName"
                                                   id="server_@server.HostName">
                                        </td>
                                        <td class="fw-semibold">@server.HostName</td>
                                        <td class="small text-muted">@server.UserID</td>
                                        <td class="small">@server.Description</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <div id="serverChips" class="mb-2 d-flex flex-wrap gap-2 small"></div>

                    <label class="form-label small mt-2">Environment</label>
                    <select id="envSelect" class="form-select form-select-sm">
                        <option value="">(All)</option>
                        @foreach (var env in Model.Environments)
                        {
                            <option value="@env.Value">@env.Text</option>
                        }
                    </select>
                    <div class="small text-muted mt-1">Filter list by environment (neutral builds always shown).</div>
                </div>
            </div>

            <div class="card shadow-sm">
                <div class="card-header bg-light fw-semibold">Actions</div>
                <div class="card-body d-flex flex-column">
                    <div class="mb-3">
                        <button type="submit" class="btn btn-primary w-100 mb-2">Deploy Selected</button>
                        <button type="button" id="clearSelection" class="btn btn-outline-secondary w-100">Clear Selection</button>
                    </div>

                    <div class="small mb-2"><strong>Selected Builds</strong></div>
                    <div id="selectionSummary" class="small mb-3" style="max-height:120px; overflow:auto;">(none)</div>

                    <div id="progressContainer" class="d-none">
                        <div class="small text-muted mb-1">Progress</div>
                        <div class="progress mb-2" style="height:20px;">
                            <div id="progressBar" class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width:0%">0%</div>
                        </div>
                        <pre id="statusMessage" class="small bg-light p-2 rounded" style="height:160px; overflow:auto;"></pre>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-lg-9">
            <div class="row row-cols-1 row-cols-md-3 g-3" id="appsCardsContainer" style="max-height:72vh; overflow:auto;">
                @if (Model.AppBuildGroups == null || Model.AppBuildGroups.Count == 0)
                {
                    <div class="col">
                        <div class="alert alert-warning m-0">No applications found.</div>
                    </div>
                }
                else
                {
                    foreach (var group in Model.AppBuildGroups)
                    {
                        <div class="col app-card" data-app="@group.AppName">
                            <div class="card h-100 shadow-sm">
                                <div class="card-header d-flex justify-content-between align-items-center">
                                    <div class="fw-semibold text-truncate" style="max-width:80%;">@group.AppName</div>
                                    <span class="badge bg-secondary small app-badge" data-app-badge="@group.AppName">@group.Variants.Count</span>
                                </div>
                                <div class="card-body p-2">
                                    @if (group.Variants.Count == 0)
                                    {
                                        <div class="text-muted small">No builds</div>
                                    }
                                    else
                                    {
                                        <div class="form-check" style="max-height:220px; overflow:auto;">
                                            @foreach (var v in group.Variants)
                                            {
                                                var chkId = $"chk_{HashCode.Combine(group.AppName, v.Build, v.Environment ?? "")}";
                                                <div class="form-check" data-env="@v.Environment">
                                                    <input class="form-check-input build-checkbox"
                                                           type="checkbox"
                                                           id="@chkId"
                                                           name="Selections"
                                                           value="@v.SelectionValue(group.AppName)"
                                                           data-app="@group.AppName"
                                                           data-build="@v.Build"
                                                           data-env="@v.Environment" />
                                                    <label class="form-check-label small text-wrap" for="@chkId"
                                                           title="@v.Display">
                                                        @v.Display
                                                    </label>
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</form>

@section Scripts {
<style>
    .app-card { min-height: 220px; }
    .app-card .card-body { padding: 0.5rem; }
    .form-check-label { white-space: normal; }
    .build-checkbox:checked + label { font-weight:600; color:#0d6efd; }
    .server-row:hover { background-color: rgba(0,123,255,0.1); }
    .server-row.selected { background-color: rgba(0,123,255,0.2); }
    .sticky-top { position: sticky; top: 0; z-index: 10; }
</style>

<script>
(function(){
    const serverCheckboxes = document.querySelectorAll('.server-checkbox');
    const selectAllServers = document.getElementById('selectAllServers');
    const serverChips = document.getElementById('serverChips');
    const selectionSummary = document.getElementById('selectionSummary');
    const clearSelectionBtn = document.getElementById('clearSelection');
    const progressContainer = document.getElementById('progressContainer');
    const envSelect = document.getElementById('envSelect');

    // Server row click
    document.querySelectorAll('.server-row').forEach(row => {
        row.addEventListener('click', e => {
            if (e.target.type === 'checkbox') return;
            const cb = row.querySelector('.server-checkbox');
            cb.checked = !cb.checked;
            cb.dispatchEvent(new Event('change'));
        });
    });

    function updateServerRowStyles(){
        serverCheckboxes.forEach(cb=>{
            const row = cb.closest('.server-row');
            row.classList.toggle('selected', cb.checked);
        });
    }
    function updateSelectAllState(){
        const total = serverCheckboxes.length;
        const checked = Array.from(serverCheckboxes).filter(c=>c.checked).length;
        if (checked === 0){ selectAllServers.indeterminate=false; selectAllServers.checked=false; }
        else if (checked === total){ selectAllServers.indeterminate=false; selectAllServers.checked=true; }
        else { selectAllServers.indeterminate=true; selectAllServers.checked=false; }
    }
    function refreshServerChips(){
        serverChips.innerHTML='';
        Array.from(serverCheckboxes).filter(c=>c.checked).forEach(c=>{
            const span=document.createElement('span');
            span.className='badge rounded-pill bg-primary';
            span.textContent=c.value;
            serverChips.appendChild(span);
        });
    }
    selectAllServers.addEventListener('change', ()=>{
        serverCheckboxes.forEach(c=>c.checked=selectAllServers.checked);
        updateServerRowStyles();
        refreshServerChips();
        updateSelectAllState();
    });
    serverCheckboxes.forEach(c=>c.addEventListener('change', ()=>{
        updateServerRowStyles();
        refreshServerChips();
        updateSelectAllState();
    }));
    updateServerRowStyles(); updateSelectAllState(); refreshServerChips();

    function refreshSelectionSummary(){
        const checks = Array.from(document.querySelectorAll('.build-checkbox')).filter(c=>c.checked && c.offsetParent !== null);
        if(!checks.length){ selectionSummary.textContent='(none)'; return; }
        selectionSummary.innerHTML='';
        checks.forEach(c=>{
            const div=document.createElement('div');
            const env = c.dataset.env ? ` (${c.dataset.env})` : '';
            div.textContent = `${c.dataset.app} :: ${c.dataset.build}${env}`;
            selectionSummary.appendChild(div);
        });
    }
    document.querySelectorAll('.build-checkbox').forEach(cb=>cb.addEventListener('change', refreshSelectionSummary));
    clearSelectionBtn.addEventListener('click', ()=>{
        document.querySelectorAll('.build-checkbox').forEach(c=>c.checked=false);
        refreshSelectionSummary();
    });

    // Environment filter
    function applyEnvFilter(){
        const env = envSelect.value;
        document.querySelectorAll('.app-card').forEach(card=>{
            let anyVisible=false;
            card.querySelectorAll('.build-checkbox').forEach(cb=>{
                const cbEnv = cb.dataset.env || '';
                const show = !env || cbEnv === '' || cbEnv === env;
                const container = cb.closest('.form-check');
                container.style.display = show ? '' : 'none';
                if(show) anyVisible=true; else cb.checked=false;
            });
            card.style.display = anyVisible ? '' : 'none';
        });
        refreshSelectionSummary();
    }
    envSelect.addEventListener('change', applyEnvFilter);
    applyEnvFilter();

    // SignalR
    const connection = new signalR.HubConnectionBuilder().withUrl("/copyHub").build();
    connection.on("ReceiveProgress", p => {
        const bar = document.getElementById("progressBar");
        bar.style.width = p + "%";
        bar.textContent = p + "%";
    });
    connection.on("ReceiveMessage", m => {
        const box = document.getElementById("statusMessage");
        box.textContent += m + "\n";
        box.scrollTop = box.scrollHeight;
    });
    connection.start().then(()=> {
        document.getElementById('hubConnectionId').value = connection.connectionId;
    }).catch(err=>console.error("SignalR connection error:", err));

    // Deploy
    window.startCopy = function(){
        const servers = Array.from(serverCheckboxes).filter(c=>c.checked).map(c=>c.value);
        const selections = Array.from(document.querySelectorAll('.build-checkbox')).filter(c=>c.checked && c.offsetParent !== null);
        if(!servers.length){ alert('Select at least one server.'); return; }
        if(!selections.length){ alert('Select at least one build.'); return; }

        progressContainer.classList.remove('d-none');

        const form = document.getElementById('deploymentForm');
        const fd = new FormData(form);
        fd.set('HubConnectionId', document.getElementById('hubConnectionId').value);

        // Clean previous to only send visible checked selections
        fd.delete('Selections');
        selections.forEach(s=>fd.append('Selections', s.value));

        const token = fd.get('__RequestVerificationToken');
        const body = new URLSearchParams(fd).toString();

        fetch('/Deploy?handler=Copy', {
            method:'POST',
            headers:{
                'Content-Type':'application/x-www-form-urlencoded',
                'RequestVerificationToken': token
            },
            body
        }).then(r=>r.json())
         .then(obj=>{
            if(!obj.success) alert(obj.message || 'Failed');
         }).catch(err=>console.error(err));
    };
})();
</script>
}
