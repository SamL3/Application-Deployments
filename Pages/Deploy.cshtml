@page
@model ApplicationDeployment.Pages.DeployModel

<h1>@ViewData["Title"]</h1>
<form id="deploymentForm" method="post" onsubmit="event.preventDefault(); startCopy();" class="my-3">
    @Html.AntiForgeryToken()
    <input type="hidden" id="hubConnectionId" name="HubConnectionId" />
    <h1 class="page-title">Deploy Applications </h1>

    <div class="row g-4">
        <div class="col-lg-4">
            <!-- Servers + Actions (unchanged) -->
            <div class="card shadow-sm mb-4">
                <div class="card-header">Servers</div>
                <div class="card-body p-2 d-flex flex-column">
                    <div class="table-responsive" style="max-height:320px; overflow:auto;">
                        <table class="table table-sm table-hover mb-2">
                            <thead class="table-light sticky-top">
                                <tr>
                                    <th scope="col">
                                        <input type="checkbox" id="selectAllServers" class="form-check-input" title="Select All">
                                    </th>
                                    <th scope="col">Host</th>
                                    <th scope="col">User</th>
                                    <th scope="col">Description</th>
                                </tr>
                            </thead>
                            <tbody id="serversTableBody">
                                @foreach (var server in Model.ServerList)
                                {
                                    <tr class="server-row" data-hostname="@server.HostName">
                                        <td>
                                            <input type="checkbox" class="form-check-input server-checkbox"
                                                   name="SelectedServers" value="@server.HostName"
                                                   id="server_@server.HostName">
                                        </td>
                                        <td class="fw-semibold">@server.HostName</td>
                                        <td class="small text-muted">@server.UserID</td>
                                        <td class="small">@server.Description</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    <div id="selectedServersInfo" class="small text-muted mt-2">No servers selected</div>

                    <!-- Replace the environment dropdown with a multi-select button group -->
                    <div class="mb-3">
                      <label class="form-label">Environments</label>
                      <div class="btn-group flex-wrap" role="group" aria-label="Environments">
                        @foreach (var env in Model.Environments)
                        {
                            var isChecked = Model.SelectedEnvironments?.Contains(env.Value, StringComparer.OrdinalIgnoreCase) ?? false;
                            <input type="checkbox"
                                   class="btn-check"
                                   name="SelectedEnvironments"
                                   id="env-@env.Value"
                                   value="@env.Value"
                                   @(isChecked ? "checked" : null)
                                   autocomplete="off" />
                            <label class="btn btn-outline-primary m-1" for="env-@env.Value">@env.Text</label>
                        }
                      </div>
                    </div>
                </div>
            </div>

            <div class="card shadow-sm">
                <div class="card-header">Actions</div>
                <div class="card-body d-flex flex-column">
                    <div class="mb-3">
                        <button type="submit" class="btn btn-primary w-100 mb-2">Deploy Selected</button>
                        <button type="button" id="clearSelection" class="btn btn-outline-secondary w-100 mb-2">Clear Selection</button>
                        <button type="button" id="openRootBtn" class="btn btn-outline-info w-100"
                                data-path="@Model.StagingPath">Open Root App Folder</button>
                    </div>

                    <div class="small mb-2"><strong>Selected Builds</strong></div>
                    <div id="selectionSummary" class="small mb-3" style="max-height:120px; overflow:auto;">(none)</div>

                    <div id="progressContainer" class="d-none">
                        <div class="small text-muted mb-1">Progress</div>
                        <div class="progress mb-2" style="height:20px;">
                            <div id="progressBar" class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width:0%">0%</div>
                        </div>
                        <pre id="statusMessage" class="small bg-light p-2 rounded" style="height:160px; overflow:auto;"></pre>
                    </div>
                </div>
            </div>
        </div>

        <!-- Apps grid on the right, rendered similar to Remove -->
        <div class="col-lg-8">
            <div class="row row-cols-1 row-cols-md-2 g-3" id="appsCardsContainer" style="max-height:72vh; overflow:auto;">
                @if (Model.AppBuildGroups == null || Model.AppBuildGroups.Count == 0)
                {
                    <div class="col">
                        <div class="alert alert-warning m-0">No applications found.</div>
                    </div>
                }
                else
                {
                    foreach (var group in Model.AppBuildGroups)
                    {
                        <div class="col app-card" data-app="@group.AppName">
                            <div class="card h-100 shadow-sm">
                                <div class="card-header small fw-semibold d-flex justify-content-between align-items-center">
                                    <span>@group.AppName</span>
                                    <span class="badge bg-secondary app-badge" data-app-badge="@group.AppName">@group.Variants.Count</span>
                                </div>
                                <div class="card-body p-0">
                                    @if (group.Variants.Count == 0)
                                    {
                                        <div class="p-3 text-muted small">No builds</div>
                                    }
                                    else
                                    {
                                        <table class="table table-sm table-hover builds-table mb-0">
                                            <thead class="table-light">
                                                <tr>
                                                    <th scope="col" style="width:50px;">
                                                        <input type="checkbox"
                                                               class="form-check-input app-select-all"
                                                               data-app="@group.AppName"
                                                               title="Select All Builds for @group.AppName">
                                                    </th>
                                                    <th scope="col">Build</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var v in group.Variants)
                                                {
                                                    var chkId = $"chk_{HashCode.Combine(group.AppName, v.Build, v.Environment ?? "")}";
                                                    <tr class="build-row"
                                                        data-app="@group.AppName"
                                                        data-build="@v.Build"
                                                        data-env="@v.Environment">
                                                        <td>
                                                            <input class="form-check-input build-checkbox"
                                                                   type="checkbox"
                                                                   id="@chkId"
                                                                   name="Selections"
                                                                   value="@v.SelectionValue(group.AppName)"
                                                                   data-app="@group.AppName"
                                                                   data-build="@v.Build"
                                                                   data-env="@v.Environment" />
                                                        </td>
                                                        <td class="text-wrap">
                                                            <label class="form-check-label small text-wrap" for="@chkId" title="@v.Display">
                                                                @v.Display
                                                            </label>
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</form>

@section Scripts {
<style>
    .app-card { min-height: 220px; }
    .app-card .card-body { padding: 0; }
    .form-check-label { white-space: normal; }
    .build-checkbox:checked + label { font-weight:600; color:#0d6efd; }
    .server-row:hover { background-color: rgba(0,123,255,0.1); }
    .server-row.selected { background-color: rgba(0,123,255,0.2); }
    .build-row.selected { background-color: rgba(13,110,253,0.08); }
    .sticky-top { position: sticky; top: 0; z-index: 10; }
</style>

<script>
(function(){
    const serverCheckboxes = document.querySelectorAll('.server-checkbox');
    const selectAllServers = document.getElementById('selectAllServers');
    const selectedServersInfo = document.getElementById('selectedServersInfo');
    const selectionSummary = document.getElementById('selectionSummary');
    const clearSelectionBtn = document.getElementById('clearSelection');
    const progressContainer = document.getElementById('progressContainer');
    const envSelect = document.getElementById('envSelect');
    const deployBtn = document.querySelector('button[type="submit"]');
    const statusBox = document.getElementById('statusMessage');
    const openRootBtn = document.getElementById('openRootBtn');

    let selectedServers = [];

    if (openRootBtn) {
        openRootBtn.addEventListener('click', function(e){
            e.preventDefault();
            const p = this.dataset.path || '';
            if (!p) { alert('Root App folder (StagingPath) not configured.'); return; }
            let url = p;
            if (url.startsWith('\\\\')) {
                url = 'file:' + url.replace(/\\/g, '/'); // -> file://server/share/path
            } else {
                url = 'file:///' + url.replace(/\\/g, '/'); // -> file:///C:/Path
            }
            try { window.open(url, '_blank'); }
            catch { alert('Your browser blocked opening local folders.'); }
        });
    }

    // Server row click
    document.querySelectorAll('.server-row').forEach(row => {
        row.addEventListener('click', e => {
            if (e.target.type === 'checkbox') return;
            const cb = row.querySelector('.server-checkbox');
            cb.checked = !cb.checked;
            cb.dispatchEvent(new Event('change'));
        });
    });

    function updateServerRowStyles(){
        serverCheckboxes.forEach(cb=>{
            const row = cb.closest('.server-row');
            row.classList.toggle('selected', cb.checked);
        });
    }
    function updateSelectAllState(){
        const total = serverCheckboxes.length;
        const checked = Array.from(serverCheckboxes).filter(c=>c.checked).length;
        if (checked === 0){ selectAllServers.indeterminate=false; selectAllServers.checked=false; }
        else if (checked === total){ selectAllServers.indeterminate=false; selectAllServers.checked=true; }
        else { selectAllServers.indeterminate=true; selectAllServers.checked=false; }
    }
    function updateSelectedServersInfo(){
        selectedServers = Array.from(serverCheckboxes).filter(c=>c.checked).map(c=>c.value);
        if (selectedServers.length === 0) selectedServersInfo.textContent = 'No servers selected';
        else if (selectedServers.length === 1) selectedServersInfo.textContent = `Selected: ${selectedServers[0]}`;
        else selectedServersInfo.textContent = `Selected: ${selectedServers.length} servers`;
    }

    selectAllServers.addEventListener('change', ()=>{
        serverCheckboxes.forEach(c=>c.checked=selectAllServers.checked);
        updateServerRowStyles();
        updateSelectAllState();
        updateSelectedServersInfo();
    });
    serverCheckboxes.forEach(c=>c.addEventListener('change', ()=>{
        updateServerRowStyles();
        updateSelectAllState();
        updateSelectedServersInfo();
    }));
    updateServerRowStyles(); updateSelectAllState(); updateSelectedServersInfo();

    // Build selection helpers (similar to Remove)
    const appSelectAllCheckboxes = document.querySelectorAll('.app-select-all');
    const buildCheckboxes = document.querySelectorAll('.build-checkbox');

    function updateBuildRowStyles() {
        document.querySelectorAll('.build-checkbox').forEach(cb => {
            const row = cb.closest('.build-row');
            row?.classList.toggle('selected', cb.checked);
        });
    }
    function updateAppSelectAllStates() {
        appSelectAllCheckboxes.forEach(appCb => {
            const app = appCb.getAttribute('data-app');
            const appBuilds = Array.from(document.querySelectorAll(`.build-checkbox[data-app="${CSS.escape(app)}"]`))
                .filter(cb => cb.offsetParent !== null); // visible only
            const checked = appBuilds.filter(cb => cb.checked).length;
            if (checked === 0) { appCb.indeterminate = false; appCb.checked = false; }
            else if (checked === appBuilds.length) { appCb.indeterminate = false; appCb.checked = true; }
            else { appCb.indeterminate = true; appCb.checked = false; }
        });
    }
    function refreshSelectionSummary(){
        const checks = Array.from(document.querySelectorAll('.build-checkbox'))
            .filter(c=>c.checked && c.offsetParent !== null);
        if(!checks.length){ selectionSummary.textContent='(none)'; return; }
        selectionSummary.innerHTML='';
        checks.forEach(c=>{
            const div=document.createElement('div');
            const env = c.dataset.env ? ` (${c.dataset.env})` : '';
            div.textContent = `${c.dataset.app} :: ${c.dataset.build}${env}`;
            selectionSummary.appendChild(div);
        });
    }

    // Row click toggles
    document.querySelectorAll('.build-row').forEach(row=>{
        row.addEventListener('click', e=>{
            if (e.target.type === 'checkbox' || e.target.tagName === 'LABEL') return;
            const cb = row.querySelector('.build-checkbox');
            cb.checked = !cb.checked;
            cb.dispatchEvent(new Event('change'));
        });
    });

    // Build checkbox change handlers
    document.querySelectorAll('.build-checkbox').forEach(cb=>{
        cb.addEventListener('change', ()=>{
            updateBuildRowStyles();
            updateAppSelectAllStates();
            refreshSelectionSummary();
        });
    });

    // App-level select all
    appSelectAllCheckboxes.forEach(appCb=>{
        appCb.addEventListener('change', ()=>{
            const app = appCb.getAttribute('data-app');
            const visibleAppBuilds = Array.from(document.querySelectorAll(`.build-checkbox[data-app="${CSS.escape(app)}"]`))
                .filter(cb => cb.offsetParent !== null);
            visibleAppBuilds.forEach(cb => cb.checked = appCb.checked);
            // trigger one change to refresh UI
            if (visibleAppBuilds.length) visibleAppBuilds[0].dispatchEvent(new Event('change'));
        });
    });

    clearSelectionBtn.addEventListener('click', ()=>{
        document.querySelectorAll('.build-checkbox').forEach(c=>c.checked=false);
        updateBuildRowStyles();
        updateAppSelectAllStates();
        refreshSelectionSummary();
    });

    // Environment filter - Fix the missing envSelect reference
    function applyEnvFilter(){
        // Since there's no envSelect dropdown, we'll skip the filtering or implement it differently
        // For now, just make sure all cards are visible
        document.querySelectorAll('.app-card').forEach(card=>{
            const app = card.getAttribute('data-app');
            const rows = card.querySelectorAll('.build-row');
            let visibleCount = 0;
            rows.forEach(row=>{
                const cb = row.querySelector('.build-checkbox');
                row.style.display = ''; // Show all rows
                visibleCount++;
            });
            const badge = card.querySelector(`[data-app-badge="${CSS.escape(app)}"]`);
            if (badge) badge.textContent = visibleCount;
            card.style.display = visibleCount > 0 ? '' : 'none';
        });
        updateAppSelectAllStates();
        refreshSelectionSummary();
    }
    
    // Comment out or remove this line since envSelect doesn't exist
    // envSelect.addEventListener('change', applyEnvFilter);
    
    updateBuildRowStyles();
    updateAppSelectAllStates();
    refreshSelectionSummary();
    applyEnvFilter();

    // SignalR
    const connection = new signalR.HubConnectionBuilder().withUrl("/copyHub").build();
    connection.on("ReceiveProgress", p => {
        const bar = document.getElementById("progressBar");
        bar.style.width = p + "%";
        bar.textContent = p + "%";
    });
    connection.on("ReceiveMessage", m => {
        statusBox.textContent += m + "\n";
        statusBox.scrollTop = statusBox.scrollHeight;
    });
    connection.on("ReceiveError", m => {
        statusBox.textContent += "[ERROR] " + m + "\n";
        statusBox.scrollTop = statusBox.scrollHeight;
    });
    connection.start().then(()=> {
        document.getElementById('hubConnectionId').value = connection.connectionId;
    }).catch(err=>{
        console.error("SignalR connection error:", err);
        // alert('Real-time connection failed. Progress updates may be unavailable.');
    });

    // Deploy
    window.startCopy = function(){
        // alert('Deploy function called! Check console for details.');
        console.log('=== DEPLOY DEBUG START ===');
        console.log('startCopy function called');
        
        const servers = Array.from(serverCheckboxes).filter(c=>c.checked).map(c=>c.value);
        const selections = Array.from(document.querySelectorAll('.build-checkbox'))
            .filter(c=>c.checked && c.offsetParent !== null);
            
        // alert(`Found ${servers.length} servers and ${selections.length} builds`);
        console.log('Selected servers:', servers);
        console.log('Selected builds:', selections.map(s => s.value));
        
        if(!servers.length){ 
            alert('Select at least one server.'); 
            return; 
        }
        if(!selections.length){ 
            alert('Select at least one build.'); 
            return; 
        }

        // Continue with the rest of the deployment logic...
        progressContainer.classList.remove('d-none');
        statusBox.textContent = '';
        deployBtn.disabled = true;

        const form = document.getElementById('deploymentForm');
        const fd = new FormData(form);
        
        console.log('Original form data:', Array.from(fd.entries()));
        
        fd.set('HubConnectionId', document.getElementById('hubConnectionId').value);
        fd.delete('Selections');
        selections.forEach(s=>fd.append('Selections', s.value));

        const token = fd.get('__RequestVerificationToken');
        const body = new URLSearchParams(fd).toString();
        
        console.log('Sending request to:', '/Deploy?handler=Copy');
        console.log('Request body:', body);

        fetch('/Deploy?handler=Copy', {
            method:'POST',
            headers:{
                'Content-Type':'application/x-www-form-urlencoded',
                'RequestVerificationToken': token
            },
            body
        }).then(async r=>{
            console.log('Response received:', r.status, r.statusText);
            const responseText = await r.text();
            console.log('Raw response text:', responseText);
            
            let payload;
            try { 
                payload = JSON.parse(responseText); 
            } catch(e) { 
                console.log('JSON parse error:', e);
                payload = null; 
            }
            
            // if (!r.ok || !payload || !payload.success) {
            //     const message = (payload && payload.message) ? payload.message : `HTTP ${r.status}`;
            //     alert(`Deployment failed: ${message}`);
            // } else {
            //     alert('Deployment succeeded!');
            // }
        }).catch(err=>{
            console.log('Fetch error:', err);
            // alert(`Network error: ${err.message}`);
        }).finally(()=>{
            deployBtn.disabled = false;
        });
    };

})();
</script>
}
