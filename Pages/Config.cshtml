@page "/Config"
@model DevApp.Pages.ConfigModel

<h1 class="page-title">Configuration Settings</h1>

@if (!string.IsNullOrEmpty(Model.ConfirmationMessage))
{
    <div class="alert alert-success">@Model.ConfirmationMessage</div>
}

<form id="configForm" onsubmit="return false;">
    @Html.AntiForgeryToken()

    <div class="row g-4">
        <!-- Row 1 -->
        <div class="col-lg-4">
            <div class="card shadow-sm h-100">
                <div class="card-header"><h5 class="mb-0">Dashboard Options</h5></div>
                <div class="card-body">
                    <div class="form-check form-switch mb-3">
                        <input class="form-check-input" type="checkbox" id="showAppsToggle" @(Model.ShowAppsOnDashboard ? "checked" : "") />
                        <label class="form-check-label" for="showAppsToggle">Show Installed Applications Section</label>
                        <div class="form-text">May slow load (remote registry).</div>
                    </div>
                    <button type="button" class="btn btn-sm btn-primary" id="saveDashboardOptions">Save Dashboard Options</button>
                    <div class="small text-muted mt-2" id="dashboardOptionsStatus"></div>
                </div>
            </div>
        </div>

        <div class="col-lg-4">
            <div class="card shadow-sm h-100">
                <div class="card-header"><h5 class="mb-0">Staging Path</h5></div>
                <div class="card-body">
                    <label for="stagingPath" class="form-label">UNC Location <span class="text-danger">*</span></label>
                    <div class="input-group mb-2">
                        <input type="text" class="form-control" id="stagingPath" value="@Model.StagingPath" />
                        <button type="button" class="btn btn-success" id="saveStagingPath">Save</button>
                    </div>
                    <div class="form-text">Example: \\server\c$\builds\</div>
                    <div id="stagingPathStatus" class="small text-muted mt-1"></div>
                </div>
            </div>
        </div>

        <div class="col-lg-4">
            <div class="card shadow-sm h-100">
                <div class="card-header"><h5 class="mb-0">CSTApps Root Path</h5></div>
                <div class="card-body">
                    <label for="cstAppsRootPath" class="form-label">Local Root (on target servers) <span class="text-danger">*</span></label>
                    <div class="input-group mb-2">
                        <input type="text" class="form-control" id="cstAppsRootPath" value="@Model.CSTAppsRootPath" />
                        <button type="button" class="btn btn-success" id="saveCstAppsRootPath">Save</button>
                    </div>
                    <div class="form-text">Example: C:\CST Apps (NOT a UNC).</div>
                    <div id="cstAppsRootStatus" class="small text-muted mt-1"></div>
                </div>
            </div>
        </div>

        <!-- Row 2 -->
        <div class="col-lg-6">
            <div class="card shadow-sm h-100">
                <div class="card-header d-flex justify-content-between">
                    <span>Servers</span>
                    <span>
                        <button type="button" class="btn btn-light btn-sm" id="addServerBtn">Add</button>
                        <button type="button" class="btn btn-success btn-sm" id="saveServersBtn">Save</button>
                    </span>
                </div>
                <div class="card-body">
                    <div class="table-responsive" style="max-height:260px;">
                        <table class="table table-sm table-hover mb-0">
                            <thead class="table-light"><tr><th>Host</th><th>User</th><th>Description</th><th style="width:55px;"></th></tr></thead>
                            <tbody id="serversTableBody">
                            @foreach (var s in Model.ServerList)
                            {
                                <tr>
                                    <td><input class="form-control form-control-sm" value="@s.HostName" data-field="hostname" required /></td>
                                    <td><input class="form-control form-control-sm" value="@s.UserID" data-field="userid" /></td>
                                    <td><input class="form-control form-control-sm" value="@s.Description" data-field="description" /></td>
                                    <td><button type="button" class="btn btn-outline-danger btn-sm delete-server-btn">Del</button></td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    </div>
                    <div class="small text-muted mt-2">Stored in appconfig.json</div>
                </div>
            </div>
        </div>

        <div class="col-lg-6">
            <div class="card shadow-sm h-100">
                <div class="card-header"><span>Environments</span></div>
                <div class="card-body">
                    <label class="form-label">Comma Separated (order used for deployment)</label>
                    <input id="environmentsCsv" class="form-control form-control-sm mb-2" value="@Model.EnvironmentsCsv" />
                    <button type="button" id="saveEnvironmentsBtn" class="btn btn-sm btn-success">Save Environments</button>
                    <div id="envStatus" class="small text-muted mt-2"></div>
                    <div class="small text-muted mt-2">Example: Dev,QA,UAT,STG,Prd</div>
                </div>
            </div>
        </div>

        <!-- Row 3 -->
        <div class="col-12">
            <div class="card shadow-sm h-100">
                <div class="card-header d-flex justify-content-between">
                    <span>Application Executables</span>
                    <span>
                        <button type="button" class="btn btn-dark btn-sm" id="addAppBtn">Add</button>
                        <button type="button" class="btn btn-success btn-sm" id="saveAppsBtn">Save</button>
                    </span>
                </div>
                <div class="card-body">
                    <div class="table-responsive" style="max-height:260px;">
                        <table class="table table-sm table-hover mb-0">
                            <thead class="table-light">
                                <tr>
                                    <th>App</th>
                                    <th>Exe</th>
                                    <th title="If checked, env not in folder path, passed as arguments">EnvInShortcut</th>
                                    <th style="width:55px;"></th>
                                </tr>
                            </thead>
                            <tbody id="appsTableBody">
                            @foreach (var a in Model.AppExecutables)
                            {
                                <tr>
                                    <td><input class="form-control form-control-sm" value="@a.Name" data-field="appname" required /></td>
                                    <td><input class="form-control form-control-sm" value="@a.Exe" data-field="exepath" required /></td>
                                    <td class="text-center">
                                        <input type="checkbox" class="form-check-input" @(a.EnvInShortcut ? "checked" : "") data-field="envinshortcut" />
                                    </td>
                                    <td><button type="button" class="btn btn-outline-danger btn-sm delete-app-btn">Del</button></td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    </div>
                    <div class="small text-muted mt-2">
                        EnvInShortcut=true => folder: App\Version, args added (-Configuration ENV -Mode ENV).<br />
                        EnvInShortcut=false => folder: App\Version\Env, no args.
                    </div>
                </div>
            </div>
        </div>

        <!-- Row 4 -->
        <div class="col-12">
            <div class="card shadow-sm h-100">
                <div class="card-header d-flex justify-content-between">
                    <span>API Tests (PowerShell)</span>
                    <span>
                        <button type="button" class="btn btn-light btn-sm" id="addApiTestBtn">Add Test</button>
                        <button type="button" class="btn btn-success btn-sm" id="saveApiTestsBtn">Save All</button>
                    </span>
                </div>
                <div class="card-body">
                    <div id="apiTestsContainer" class="mb-2" style="max-height:300px; overflow:auto;">
                        @if (Model.ApiTests.Count == 0)
                        {
                            <div class="text-muted small">No API tests defined.</div>
                        }
                        else
                        {
                            foreach (var t in Model.ApiTests)
                            {
                                <div class="border rounded p-2 mb-2 api-test" data-id="@t.Id">
                                    <div class="row g-2 mb-1">
                                        <div class="col-8">
                                            <input class="form-control form-control-sm api-desc" value="@t.Description" placeholder="Description" />
                                        </div>
                                        <div class="col-4 text-end">
                                            <button type="button" class="btn btn-outline-danger btn-sm delete-test-btn">Delete</button>
                                        </div>
                                    </div>
                                    <input class="form-control form-control-sm mb-2 api-path" value="@t.ScriptPath" placeholder="Full script path (ps1 or exe)" />
                                    <div class="small fw-semibold mb-1">Parameters</div>
                                    <div class="params" style="max-height:120px; overflow:auto;">
                                        @if (t.Parameters.Count == 0)
                                        {
                                            <div class="text-muted small empty-params">No parameters</div>
                                        }
                                        else
                                        {
                                            foreach (var p in t.Parameters)
                                            {
                                                <div class="input-group input-group-sm mb-1 param-row">
                                                    <input class="form-control param-name" placeholder="Name" value="@p.Name" />
                                                    <input class="form-control param-value" placeholder="Value" value="@p.Value" />
                                                    <button type="button" class="btn btn-outline-danger param-del-btn">&times;</button>
                                                </div>
                                            }
                                        }
                                    </div>
                                    <button type="button" class="btn btn-outline-secondary btn-sm add-param-btn mt-1">Add Param</button>
                                </div>
                            }
                        }
                    </div>
                    <div class="small text-muted">Executed on Test page as: scriptPath + each parameter as "-p Name Value".</div>
                    <div id="apiTestsStatus" class="small mt-2 text-muted"></div>
                </div>
            </div>
        </div>
    </div>
</form>

@section Scripts {
<script>
document.addEventListener('DOMContentLoaded', () => {
    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
    const appsTableBody = document.getElementById('appsTableBody');
    const serversTableBody = document.getElementById('serversTableBody');
    const apiTestsContainer = document.getElementById('apiTestsContainer');

    // Add Server button
    document.getElementById('addServerBtn').addEventListener('click', () => {
        const tr = document.createElement('tr');
        tr.innerHTML = `
            <td><input class="form-control form-control-sm" data-field="hostname" required /></td>
            <td><input class="form-control form-control-sm" data-field="userid" /></td>
            <td><input class="form-control form-control-sm" data-field="description" /></td>
            <td><button type="button" class="btn btn-outline-danger btn-sm delete-server-btn">Del</button></td>`;
        serversTableBody.appendChild(tr);
    });

    // Save Servers button
    document.getElementById('saveServersBtn').addEventListener('click', async () => {
        const servers = [];
        serversTableBody.querySelectorAll('tr').forEach(tr => {
            const hostname = tr.querySelector('[data-field="hostname"]').value.trim();
            const userid = tr.querySelector('[data-field="userid"]').value.trim();
            const description = tr.querySelector('[data-field="description"]').value.trim();
            if (hostname) servers.push({ HostName: hostname, UserID: userid, Description: description });
        });
        try {
            const resp = await fetch('/Config?handler=SaveServers', {
                method:'POST',
                headers:{
                    'Content-Type':'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({ servers })
            });
            const result = await resp.json();
            showStatus(result.message, result.success ? 'success':'danger');
        } catch(e){
            showStatus('Error saving servers: '+ e.message, 'danger');
        }
    });

    // Add App button
    document.getElementById('addAppBtn').addEventListener('click', () => {
        const tr = document.createElement('tr');
        tr.innerHTML = `
            <td><input class="form-control form-control-sm" data-field="appname" required /></td>
            <td><input class="form-control form-control-sm" data-field="exepath" required /></td>
            <td class="text-center">
                <input type="checkbox" class="form-check-input" data-field="envinshortcut" />
            </td>
            <td><button type="button" class="btn btn-outline-danger btn-sm delete-app-btn">Del</button></td>`;
        appsTableBody.appendChild(tr);
    });

    // Save Apps button
    document.getElementById('saveAppsBtn').addEventListener('click', async () => {
        const apps = [];
        appsTableBody.querySelectorAll('tr').forEach(tr => {
            const name = tr.querySelector('[data-field="appname"]').value.trim();
            const exe = tr.querySelector('[data-field="exepath"]').value.trim();
            const envInShortcut = tr.querySelector('[data-field="envinshortcut"]').checked;
            if (name && exe) apps.push({ name, exe, envInShortcut });
        });
        try {
            const resp = await fetch('/Config?handler=SaveApps', {
                method:'POST',
                headers:{
                    'Content-Type':'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({ apps })
            });
            const result = await resp.json();
            showStatus(result.message, result.success ? 'success':'danger');
        } catch(e){
            showStatus('Error saving apps: '+ e.message, 'danger');
        }
    });

    // Add API Test button
    document.getElementById('addApiTestBtn').addEventListener('click', () => {
        const testId = 'test_' + Date.now();
        const testDiv = document.createElement('div');
        testDiv.className = 'border rounded p-2 mb-2 api-test';
        testDiv.setAttribute('data-id', testId);
        testDiv.innerHTML = `
            <div class="row g-2 mb-1">
                <div class="col-8">
                    <input class="form-control form-control-sm api-desc" placeholder="Description" />
                </div>
                <div class="col-4 text-end">
                    <button type="button" class="btn btn-outline-danger btn-sm delete-test-btn">Delete</button>
                </div>
            </div>
            <input class="form-control form-control-sm mb-2 api-path" placeholder="Full script path (ps1 or exe)" />
            <div class="small fw-semibold mb-1">Parameters</div>
            <div class="params" style="max-height:120px; overflow:auto;">
                <div class="text-muted small empty-params">No parameters</div>
            </div>
            <button type="button" class="btn btn-outline-secondary btn-sm add-param-btn mt-1">Add Param</button>`;
        
        // Remove "No API tests defined" message if it exists
        const noTestsMsg = apiTestsContainer.querySelector('.text-muted.small');
        if (noTestsMsg && noTestsMsg.textContent.includes('No API tests defined')) {
            noTestsMsg.remove();
        }
        
        apiTestsContainer.appendChild(testDiv);
    });

    // Save API Tests button
    document.getElementById('saveApiTestsBtn').addEventListener('click', async () => {
        const tests = [];
        apiTestsContainer.querySelectorAll('.api-test').forEach(testDiv => {
            const id = testDiv.getAttribute('data-id');
            const description = testDiv.querySelector('.api-desc').value.trim();
            const scriptPath = testDiv.querySelector('.api-path').value.trim();
            const parameters = [];
            
            testDiv.querySelectorAll('.param-row').forEach(paramRow => {
                const name = paramRow.querySelector('.param-name').value.trim();
                const value = paramRow.querySelector('.param-value').value.trim();
                if (name || value) parameters.push({ Name: name, Value: value });
            });
            
            if (description && scriptPath) {
                tests.push({ Id: id, Description: description, ScriptPath: scriptPath, Parameters: parameters });
            }
        });
        
        try {
            const resp = await fetch('/Config?handler=SaveApiTests', {
                method:'POST',
                headers:{
                    'Content-Type':'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({ tests })
            });
            const result = await resp.json();
            const statusEl = document.getElementById('apiTestsStatus');
            statusEl.textContent = result.message;
            statusEl.className = result.success ? 'small text-success mt-2' : 'small text-danger mt-2';
        } catch(e){
            const statusEl = document.getElementById('apiTestsStatus');
            statusEl.textContent = 'Error saving API tests: ' + e.message;
            statusEl.className = 'small text-danger mt-2';
        }
    });

    // Event delegation for delete buttons and add param buttons
    document.addEventListener('click', e => {
        if (e.target.classList.contains('delete-app-btn'))
            e.target.closest('tr').remove();
        if (e.target.classList.contains('delete-server-btn'))
            e.target.closest('tr').remove();
        if (e.target.classList.contains('delete-test-btn')) {
            e.target.closest('.api-test').remove();
            // Show "No API tests defined" if no tests remain
            if (apiTestsContainer.querySelectorAll('.api-test').length === 0) {
                apiTestsContainer.innerHTML = '<div class="text-muted small">No API tests defined.</div>';
            }
        }
        if (e.target.classList.contains('add-param-btn')) {
            const paramsDiv = e.target.closest('.api-test').querySelector('.params');
            const emptyMsg = paramsDiv.querySelector('.empty-params');
            if (emptyMsg) emptyMsg.remove();
            
            const paramRow = document.createElement('div');
            paramRow.className = 'input-group input-group-sm mb-1 param-row';
            paramRow.innerHTML = `
                <input class="form-control param-name" placeholder="Name" />
                <input class="form-control param-value" placeholder="Value" />
                <button type="button" class="btn btn-outline-danger param-del-btn">&times;</button>`;
            paramsDiv.appendChild(paramRow);
        }
        if (e.target.classList.contains('param-del-btn')) {
            const paramRow = e.target.closest('.param-row');
            const paramsDiv = paramRow.closest('.params');
            paramRow.remove();
            
            // Show "No parameters" if no params remain
            if (paramsDiv.querySelectorAll('.param-row').length === 0) {
                paramsDiv.innerHTML = '<div class="text-muted small empty-params">No parameters</div>';
            }
        }
    });

    // Save Environments button
    document.getElementById('saveEnvironmentsBtn').addEventListener('click', async () => {
        const environmentsCsv = document.getElementById('environmentsCsv').value.trim();
        const statusEl = document.getElementById('envStatus');
        statusEl.textContent = 'Saving...';
        try {
            const resp = await fetch('/Config?handler=SaveEnvironments', {
                method:'POST',
                headers:{
                    'Content-Type':'application/x-www-form-urlencoded',
                    'RequestVerificationToken': token
                },
                body: new URLSearchParams({ environmentsCsv })
            });
            const result = await resp.json();
            statusEl.textContent = result.message;
            statusEl.className = result.success ? 'small text-success' : 'small text-danger';
        } catch(e){
            statusEl.textContent = 'Error: ' + e.message;
            statusEl.className = 'small text-danger';
        }
    });

    // Save CSTApps Root Path
    document.getElementById('saveCstAppsRootPath').addEventListener('click', async () => {
        const path = document.getElementById('cstAppsRootPath').value.trim();
        const statusEl = document.getElementById('cstAppsRootStatus');
        statusEl.textContent = 'Saving...';
        try {
            const resp = await fetch('/Config?handler=SaveCstAppsRootPath', {
                method:'POST',
                headers:{
                    'Content-Type':'application/x-www-form-urlencoded',
                    'RequestVerificationToken': token
                },
                body: new URLSearchParams({ cstAppsRootPath: path })
            });
            const result = await resp.json();
            statusEl.textContent = result.message;
            statusEl.className = result.success ? 'small text-success' : 'small text-danger';
        } catch(e){
            statusEl.textContent = 'Error: ' + e.message;
            statusEl.className = 'small text-danger';
        }
    });

    // Save Staging Path
    document.getElementById('saveStagingPath').addEventListener('click', async () => {
        const path = document.getElementById('stagingPath').value.trim();
        const statusEl = document.getElementById('stagingPathStatus');
        statusEl.textContent = 'Saving...';
        try {
            const resp = await fetch('/Config?handler=SaveStagingPath', {
                method:'POST',
                headers:{
                    'Content-Type':'application/x-www-form-urlencoded',
                    'RequestVerificationToken': token
                },
                body: new URLSearchParams({ stagingPath: path })
            });
            const result = await resp.json();
            statusEl.textContent = result.message;
            statusEl.className = result.success ? 'small text-success' : 'small text-danger';
        } catch(e){
            statusEl.textContent = 'Error: ' + e.message;
            statusEl.className = 'small text-danger';
        }
    });

    // Save Dashboard Options
    document.getElementById('saveDashboardOptions').addEventListener('click', async () => {
        const showApps = document.getElementById('showAppsToggle').checked;
        const statusEl = document.getElementById('dashboardOptionsStatus');
        statusEl.textContent = 'Saving...';
        try {
            const resp = await fetch('/Config?handler=SaveDashboardOptions', {
                method:'POST',
                headers:{
                    'Content-Type':'application/x-www-form-urlencoded',
                    'RequestVerificationToken': token
                },
                body: new URLSearchParams({ showApps })
            });
            const result = await resp.json();
            statusEl.textContent = result.message;
            statusEl.className = result.success ? 'small text-success' : 'small text-danger';
        } catch(e){
            statusEl.textContent = 'Error: ' + e.message;
            statusEl.className = 'small text-danger';
        }
    });

    // Export Configuration function
    window.exportConfiguration = function() {
        const servers = [];
        document.querySelectorAll('#serversTableBody tr').forEach(tr => {
            const hostname = tr.querySelector('[data-field="hostname"]')?.value.trim();
            if (!hostname) return;
            servers.push({
                hostname,
                userid: tr.querySelector('[data-field="userid"]').value.trim(),
                description: tr.querySelector('[data-field="description"]').value.trim()
            });
        });
        const apps = [];
        appsTableBody.querySelectorAll('tr').forEach(tr => {
            const name = tr.querySelector('[data-field="appname"]').value.trim();
            const exe = tr.querySelector('[data-field="exepath"]').value.trim();
            const envInShortcut = tr.querySelector('[data-field="envinshortcut"]').checked;
            if (name && exe) apps.push({ name, exe, envInShortcut });
        });
        const cfg = {
            stagingPath: document.getElementById('stagingPath').value,
            showAppsOnDashboard: document.getElementById('showAppsToggle').checked,
            environments: document.getElementById('environmentsCsv').value,
            apps,
            cstAppsRootPath: document.getElementById('cstAppsRootPath').value,
            exported: new Date().toISOString()
        };
        const blob = new Blob([JSON.stringify(cfg,null,2)], {type:'application/json'});
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'config-export.json';
        a.click();
        URL.revokeObjectURL(url);
    };

    function showStatus(msg, type='info') {
        // Create a temporary status message
        const statusDiv = document.createElement('div');
        statusDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
        statusDiv.style.cssText = 'top: 20px; right: 20px; z-index: 1050; min-width: 300px;';
        statusDiv.innerHTML = `
            ${msg}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        document.body.appendChild(statusDiv);
        
        // Auto-remove after 3.5 seconds
        setTimeout(() => {
            if (statusDiv.parentNode) {
                statusDiv.remove();
            }
        }, 3500);
    }
});
</script>
}