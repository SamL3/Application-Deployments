@page "/Config"
@model ApplicationDeployment.Pages.ConfigModel

<h1 class="mb-3">Config — Configuration Settings</h1>

<form id="configForm" onsubmit="return false;">
    @Html.AntiForgeryToken()

    <div class="row g-4">
        <!-- Dashboard Options (ensure single instance) -->
        <div class="col-lg-4">
            <div class="card shadow-sm h-100" id="dashboardOptionsCard">
                <div class="card-header bg-dark text-white">
                    <h5 class="mb-0">Dashboard Options</h5>
                </div>
                <div class="card-body">
                    <div class="form-check form-switch mb-3">
                        <input class="form-check-input" type="checkbox" id="showAppsToggle" @(Model.ShowAppsOnDashboard ? "checked" : "") />
                        <label class="form-check-label" for="showAppsToggle">
                            Show Installed Applications Section
                        </label>
                        <div class="form-text">Remote registry enumeration can slow loading.</div>
                    </div>
                    <button type="button" class="btn btn-sm btn-primary" id="saveDashboardOptions">Save Dashboard Options</button>
                    <div class="small text-muted mt-2" id="dashboardOptionsStatus"></div>
                </div>
            </div>
        </div>

        <!-- Staging Path -->
        <div class="col-lg-4">
            <div class="card shadow-sm h-100">
                <div class="card-header bg-primary text-white"><h5 class="mb-0">Staging Path</h5></div>
                <div class="card-body">
                    <label for="stagingPath" class="form-label">UNC Location <span class="text-danger">*</span></label>
                    <div class="input-group mb-2">
                        <input type="text" class="form-control" id="stagingPath" value="@Model.StagingPath" />
                        <button type="button" class="btn btn-success" id="saveStagingPath">Save</button>
                    </div>
                    <div class="form-text">Example: \\server\c$\builds\</div>
                </div>
            </div>
        </div>

        <!-- Server List -->
        <div class="col-lg-4">
            <div class="card shadow-sm h-100">
                <div class="card-header bg-info text-white d-flex justify-content-between">
                    <span>Servers</span>
                    <span>
                        <button type="button" class="btn btn-light btn-sm" id="addServerBtn">Add</button>
                        <button type="button" class="btn btn-success btn-sm" id="saveServersBtn">Save</button>
                    </span>
                </div>
                <div class="card-body">
                    <div class="table-responsive" style="max-height:260px;">
                        <table class="table table-sm table-hover mb-0">
                            <thead class="table-light">
                                <tr>
                                    <th>Host</th><th>User</th><th>Description</th><th style="width:55px;"></th>
                                </tr>
                            </thead>
                            <tbody id="serversTableBody">
                            @foreach (var s in Model.ServerList)
                            {
                                <tr>
                                    <td><input class="form-control form-control-sm" value="@s.HostName" data-field="hostname" required /></td>
                                    <td><input class="form-control form-control-sm" value="@s.UserID" data-field="userid" /></td>
                                    <td><input class="form-control form-control-sm" value="@s.Description" data-field="description" /></td>
                                    <td><button type="button" class="btn btn-outline-danger btn-sm delete-server-btn">Del</button></td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    </div>
                    <div class="small text-muted mt-2">Stored in servers.csv</div>
                </div>
            </div>
        </div>

        <!-- App Executables -->
        <div class="col-lg-6">
            <div class="card shadow-sm h-100">
                <div class="card-header bg-warning d-flex justify-content-between">
                    <span>Application Executables</span>
                    <span>
                        <button type="button" class="btn btn-dark btn-sm" id="addAppBtn">Add</button>
                        <button type="button" class="btn btn-success btn-sm" id="saveAppsBtn">Save</button>
                    </span>
                </div>
                <div class="card-body">
                    <div class="table-responsive" style="max-height:260px;">
                        <table class="table table-sm table-hover mb-0">
                            <thead class="table-light">
                                <tr><th>App</th><th>Exe Path</th><th style="width:55px;"></th></tr>
                            </thead>
                            <tbody id="appsTableBody">
                            @foreach (var a in Model.AppExes)
                            {
                                <tr>
                                    <td><input class="form-control form-control-sm" value="@a.Key" data-field="appname" required /></td>
                                    <td><input class="form-control form-control-sm" value="@a.Value" data-field="exepath" required /></td>
                                    <td><button type="button" class="btn btn-outline-danger btn-sm delete-app-btn">Del</button></td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    </div>
                    <div class="small text-muted mt-2">Used for managing processes.</div>
                </div>
            </div>
        </div>

        <!-- Summary -->
        <div class="col-lg-6">
            <div class="card shadow-sm h-100">
                <div class="card-header bg-light">Status</div>
                <div class="card-body">
                    <div id="statusArea" class="alert alert-info d-none py-2 mb-3">
                        <span id="statusMessage">Ready</span>
                    </div>
                    <div class="row text-center">
                        <div class="col-4">
                            <div class="h4 mb-0" id="serverCount">@Model.ServerList.Count</div>
                            <small class="text-muted">Servers</small>
                        </div>
                        <div class="col-4">
                            <div class="h4 mb-0" id="appCount">@Model.AppExes.Count</div>
                            <small class="text-muted">Apps</small>
                        </div>
                        <div class="col-4">
                            <div class="h4 mb-0">@((Model.ShowAppsOnDashboard) ? "Apps On" : "Apps Off")</div>
                            <small class="text-muted">Dashboard</small>
                        </div>
                    </div>
                    <hr />
                    <button type="button" class="btn btn-outline-secondary btn-sm" onclick="exportConfiguration()">Export Config</button>
                    <input type="file" id="importConfig" accept=".json" class="d-none" onchange="importConfiguration(event)" />
                    <button type="button" class="btn btn-outline-primary btn-sm" onclick="document.getElementById('importConfig').click()">Import Config</button>
                </div>
            </div>
        </div>
    </div>
</form>

@section Scripts {
<script>
document.addEventListener('DOMContentLoaded', () => {
    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
    const statusArea = document.getElementById('statusArea');
    const statusMessage = document.getElementById('statusMessage');
    const dashboardOptionsStatus = document.getElementById('dashboardOptionsStatus');

    function showStatus(msg, type='info', hold=false) {
        statusArea.className = `alert alert-${type} py-2`;
        statusMessage.textContent = msg;
        statusArea.classList.remove('d-none');
        if (!hold) setTimeout(()=>statusArea.classList.add('d-none'), 3500);
    }

    // Dashboard options save
    document.getElementById('saveDashboardOptions').addEventListener('click', async () => {
        const showApps = document.getElementById('showAppsToggle').checked;
        dashboardOptionsStatus.textContent = 'Saving...';
        try {
            const resp = await fetch('/Config?handler=SaveDashboardOptions', {
                method:'POST',
                headers:{
                    'Content-Type':'application/x-www-form-urlencoded',
                    'RequestVerificationToken': token
                },
                body:new URLSearchParams({ showApps })
            });
            const result = await resp.json();
            dashboardOptionsStatus.textContent = result.message;
            dashboardOptionsStatus.className = result.success ? 'text-success small' : 'text-danger small';
            if (result.success) showStatus('Dashboard option updated. (Reload to apply.)','success');
        } catch(e) {
            dashboardOptionsStatus.textContent = 'Error: ' + e.message;
            dashboardOptionsStatus.className = 'text-danger small';
        }
    });

    // Servers
    document.getElementById('addServerBtn').addEventListener('click', () => {
        const tbody = document.getElementById('serversTableBody');
        const tr = document.createElement('tr');
        tr.innerHTML = `
            <td><input class="form-control form-control-sm" data-field="hostname" required/></td>
            <td><input class="form-control form-control-sm" data-field="userid"/></td>
            <td><input class="form-control form-control-sm" data-field="description"/></td>
            <td><button type="button" class="btn btn-outline-danger btn-sm delete-server-btn">Del</button></td>`;
        tbody.appendChild(tr);
    });

    document.getElementById('saveServersBtn').addEventListener('click', async () => {
        const servers = [];
        document.querySelectorAll('#serversTableBody tr').forEach(tr => {
            const hostname = tr.querySelector('[data-field="hostname"]').value.trim();
            if (!hostname) return;
            servers.push({
                hostname,
                userid: tr.querySelector('[data-field="userid"]').value.trim(),
                description: tr.querySelector('[data-field="description"]').value.trim()
            });
        });
        try {
            const resp = await fetch('/Config?handler=SaveServers', {
                method:'POST',
                headers:{
                    'Content-Type':'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({ servers })
            });
            const result = await resp.json();
            showStatus(result.message, result.success ? 'success':'danger');
            if (result.success) document.getElementById('serverCount').textContent = servers.length;
        } catch(e) {
            showStatus('Error saving servers: '+ e.message,'danger');
        }
    });

    // Apps
    document.getElementById('addAppBtn').addEventListener('click', () => {
        const tbody = document.getElementById('appsTableBody');
        const tr = document.createElement('tr');
        tr.innerHTML = `
            <td><input class="form-control form-control-sm" data-field="appname" required/></td>
            <td><input class="form-control form-control-sm" data-field="exepath" required/></td>
            <td><button type="button" class="btn btn-outline-danger btn-sm delete-app-btn">Del</button></td>`;
        tbody.appendChild(tr);
    });

    document.getElementById('saveAppsBtn').addEventListener('click', async () => {
        const apps = {};
        document.querySelectorAll('#appsTableBody tr').forEach(tr => {
            const name = tr.querySelector('[data-field="appname"]').value.trim();
            const path = tr.querySelector('[data-field="exepath"]').value.trim();
            if (name && path) apps[name] = path;
        });
        try {
            const resp = await fetch('/Config?handler=SaveApps', {
                method:'POST',
                headers:{
                    'Content-Type':'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({ apps })
            });
            const result = await resp.json();
            showStatus(result.message, result.success ? 'success':'danger');
            if (result.success) document.getElementById('appCount').textContent = Object.keys(apps).length;
        } catch(e) {
            showStatus('Error saving apps: '+ e.message,'danger');
        }
    });

    // Delete row handlers (servers & apps)
    document.addEventListener('click', e => {
        if (e.target.classList.contains('delete-server-btn') ||
            e.target.classList.contains('delete-app-btn')) {
            e.target.closest('tr').remove();
        }
    });

    // Staging path
    document.getElementById('saveStagingPath').addEventListener('click', async () => {
        const stagingPath = document.getElementById('stagingPath').value.trim();
        if (!stagingPath) { showStatus('Staging path required','danger'); return; }
        try {
            const resp = await fetch('/Config?handler=SaveStagingPath', {
                method:'POST',
                headers:{
                    'Content-Type':'application/x-www-form-urlencoded',
                    'RequestVerificationToken': token
                },
                body:new URLSearchParams({ stagingPath })
            });
            const result = await resp.json();
            showStatus(result.message, result.success ? 'success':'danger');
        } catch(e) {
            showStatus('Error saving staging path: '+ e.message,'danger');
        }
    });

    // Export / Import
    window.exportConfiguration = function() {
        const servers = [];
        document.querySelectorAll('#serversTableBody tr').forEach(tr => {
            const hostname = tr.querySelector('[data-field="hostname"]').value.trim();
            if (!hostname) return;
            servers.push({
                hostname,
                userid: tr.querySelector('[data-field="userid"]').value.trim(),
                description: tr.querySelector('[data-field="description"]').value.trim()
            });
        });
        const apps = {};
        document.querySelectorAll('#appsTableBody tr').forEach(tr => {
            const a = tr.querySelector('[data-field="appname"]').value.trim();
            const p = tr.querySelector('[data-field="exepath"]').value.trim();
            if (a && p) apps[a] = p;
        });
        const cfg = {
            stagingPath: document.getElementById('stagingPath').value,
            showAppsOnDashboard: document.getElementById('showAppsToggle').checked,
            servers, apps,
            exported: new Date().toISOString()
        };
        const blob = new Blob([JSON.stringify(cfg,null,2)], {type:'application/json'});
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'config-export.json';
        a.click();
        URL.revokeObjectURL(url);
    };

    window.importConfiguration = function(evt) {
        const file = evt.target.files[0];
        if (!file) return;
        const reader = new FileReader();
        reader.onload = e => {
            try {
                const cfg = JSON.parse(e.target.result);
                if (cfg.stagingPath) document.getElementById('stagingPath').value = cfg.stagingPath;
                if (typeof cfg.showAppsOnDashboard === 'boolean')
                    document.getElementById('showAppsToggle').checked = cfg.showAppsOnDashboard;
                if (cfg.servers) {
                    const tbody = document.getElementById('serversTableBody');
                    tbody.innerHTML = '';
                    cfg.servers.forEach(s => {
                        const tr = document.createElement('tr');
                        tr.innerHTML = `
                            <td><input class="form-control form-control-sm" value="${s.hostname||''}" data-field="hostname" required/></td>
                            <td><input class="form-control form-control-sm" value="${s.userid||''}" data-field="userid"/></td>
                            <td><input class="form-control form-control-sm" value="${s.description||''}" data-field="description"/></td>
                            <td><button type="button" class="btn btn-outline-danger btn-sm delete-server-btn">Del</button></td>`;
                        tbody.appendChild(tr);
                    });
                }
                if (cfg.apps) {
                    const tbody = document.getElementById('appsTableBody');
                    tbody.innerHTML = '';
                    Object.entries(cfg.apps).forEach(([k,v]) => {
                        const tr = document.createElement('tr');
                        tr.innerHTML = `
                            <td><input class="form-control form-control-sm" value="${k}" data-field="appname" required/></td>
                            <td><input class="form-control form-control-sm" value="${v}" data-field="exepath" required/></td>
                            <td><button type="button" class="btn btn-outline-danger btn-sm delete-app-btn">Del</button></td>`;
                        tbody.appendChild(tr);
                    });
                }
                showStatus('Imported (not saved yet).','success');
            } catch(err) {
                showStatus('Import error: '+ err.message,'danger');
            }
        };
        reader.readAsText(file);
    };
});
</script>
}