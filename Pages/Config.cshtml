@page "/Config"
@model ApplicationDeployment.Pages.ConfigModel

<h1 class="mb-3">Config — Configuration Settings</h1>

<form id="configForm" onsubmit="return false;">
    @Html.AntiForgeryToken()

    <div class="row g-4">
        <!-- Dashboard Options -->
        <div class="col-lg-4">
            <div class="card shadow-sm h-100">
                <div class="card-header bg-dark text-white">
                    <h5 class="mb-0">Dashboard Options</h5>
                </div>
                <div class="card-body">
                    <div class="form-check form-switch mb-3">
                        <input class="form-check-input" type="checkbox" id="showAppsToggle" @(Model.ShowAppsOnDashboard ? "checked" : "") />
                        <label class="form-check-label" for="showAppsToggle">Show Installed Applications Section</label>
                        <div class="form-text">May slow load (remote registry).</div>
                    </div>
                    <button type="button" class="btn btn-sm btn-primary" id="saveDashboardOptions">Save Dashboard Options</button>
                    <div class="small text-muted mt-2" id="dashboardOptionsStatus"></div>
                </div>
            </div>
        </div>

        <!-- Staging Path -->
        <div class="col-lg-4">
            <div class="card shadow-sm h-100">
                <div class="card-header bg-primary text-white"><h5 class="mb-0">Staging Path</h5></div>
                <div class="card-body">
                    <label for="stagingPath" class="form-label">UNC Location <span class="text-danger">*</span></label>
                    <div class="input-group mb-2">
                        <input type="text" class="form-control" id="stagingPath" value="@Model.StagingPath" />
                        <button type="button" class="btn btn-success" id="saveStagingPath">Save</button>
                    </div>
                    <div class="form-text">Example: \\server\c$\builds\</div>
                </div>
            </div>
        </div>

        <!-- Servers -->
        <div class="col-lg-4">
            <div class="card shadow-sm h-100">
                <div class="card-header bg-info text-white d-flex justify-content-between">
                    <span>Servers</span>
                    <span>
                        <button type="button" class="btn btn-light btn-sm" id="addServerBtn">Add</button>
                        <button type="button" class="btn btn-success btn-sm" id="saveServersBtn">Save</button>
                    </span>
                </div>
                <div class="card-body">
                    <div class="table-responsive" style="max-height:260px;">
                        <table class="table table-sm table-hover mb-0">
                            <thead class="table-light"><tr><th>Host</th><th>User</th><th>Description</th><th style="width:55px;"></th></tr></thead>
                            <tbody id="serversTableBody">
                            @foreach (var s in Model.ServerList)
                            {
                                <tr>
                                    <td><input class="form-control form-control-sm" value="@s.HostName" data-field="hostname" required /></td>
                                    <td><input class="form-control form-control-sm" value="@s.UserID" data-field="userid" /></td>
                                    <td><input class="form-control form-control-sm" value="@s.Description" data-field="description" /></td>
                                    <td><button type="button" class="btn btn-outline-danger btn-sm delete-server-btn">Del</button></td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    </div>
                    <div class="small text-muted mt-2">Stored in servers.csv</div>
                </div>
            </div>
        </div>

        <!-- App Executables -->
        <div class="col-lg-6">
            <div class="card shadow-sm h-100">
                <div class="card-header bg-warning d-flex justify-content-between">
                    <span>Application Executables</span>
                    <span>
                        <button type="button" class="btn btn-dark btn-sm" id="addAppBtn">Add</button>
                        <button type="button" class="btn btn-success btn-sm" id="saveAppsBtn">Save</button>
                    </span>
                </div>
                <div class="card-body">
                    <div class="table-responsive" style="max-height:260px;">
                        <table class="table table-sm table-hover mb-0">
                            <thead class="table-light"><tr><th>App</th><th>Exe Path</th><th style="width:55px;"></th></tr></thead>
                            <tbody id="appsTableBody">
                            @foreach (var a in Model.AppExes)
                            {
                                <tr>
                                    <td><input class="form-control form-control-sm" value="@a.Key" data-field="appname" required /></td>
                                    <td><input class="form-control form-control-sm" value="@a.Value" data-field="exepath" required /></td>
                                    <td><button type="button" class="btn btn-outline-danger btn-sm delete-app-btn">Del</button></td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    </div>
                    <div class="small text-muted mt-2">Used for process operations.</div>
                </div>
            </div>
        </div>

        <!-- API Tests Configuration -->
        <div class="col-lg-6">
            <div class="card shadow-sm h-100">
                <div class="card-header bg-secondary text-white d-flex justify-content-between">
                    <span>API Tests (PowerShell)</span>
                    <span>
                        <button type="button" class="btn btn-light btn-sm" id="addApiTestBtn">Add Test</button>
                        <button type="button" class="btn btn-success btn-sm" id="saveApiTestsBtn">Save All</button>
                    </span>
                </div>
                <div class="card-body">
                    <div id="apiTestsContainer" class="mb-2" style="max-height:300px; overflow:auto;">
                        @if (Model.ApiTests.Count == 0)
                        {
                            <div class="text-muted small">No API tests defined.</div>
                        }
                        else
                        {
                            foreach (var t in Model.ApiTests)
                            {
                                <div class="border rounded p-2 mb-2 api-test" data-id="@t.Id">
                                    <div class="row g-2 mb-1">
                                        <div class="col-8">
                                            <input class="form-control form-control-sm api-desc" value="@t.Description" placeholder="Description" />
                                        </div>
                                        <div class="col-4 text-end">
                                            <button type="button" class="btn btn-outline-danger btn-sm delete-test-btn">Delete</button>
                                        </div>
                                    </div>
                                    <input class="form-control form-control-sm mb-2 api-path" value="@t.ScriptPath" placeholder="Full script path (ps1 or exe)" />
                                    <div class="small fw-semibold mb-1">Parameters</div>
                                    <div class="params" style="max-height:120px; overflow:auto;">
                                        @if (t.Parameters.Count == 0)
                                        {
                                            <div class="text-muted small empty-params">No parameters</div>
                                        }
                                        else
                                        {
                                            foreach (var p in t.Parameters)
                                            {
                                                <div class="input-group input-group-sm mb-1 param-row">
                                                    <input class="form-control param-name" placeholder="Name" value="@p.Name" />
                                                    <input class="form-control param-value" placeholder="Value" value="@p.Value" />
                                                    <button type="button" class="btn btn-outline-danger param-del-btn">&times;</button>
                                                </div>
                                            }
                                        }
                                    </div>
                                    <button type="button" class="btn btn-outline-secondary btn-sm add-param-btn mt-1">Add Param</button>
                                </div>
                            }
                        }
                    </div>
                    <div class="small text-muted">Executed on Test page as: scriptPath + each parameter as "-p Name Value".</div>
                    <div id="apiTestsStatus" class="small mt-2 text-muted"></div>
                </div>
            </div>
        </div>

        <!-- Summary -->
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-header bg-light">Status & Export</div>
                <div class="card-body">
                    <div id="statusArea" class="alert alert-info d-none py-2 mb-3">
                        <span id="statusMessage">Ready</span>
                    </div>
                    <div class="d-flex gap-2 flex-wrap">
                        <button type="button" class="btn btn-outline-secondary btn-sm" onclick="exportConfiguration()">Export Config</button>
                        <input type="file" id="importConfig" accept=".json" class="d-none" onchange="importConfiguration(event)" />
                        <button type="button" class="btn btn-outline-primary btn-sm" onclick="document.getElementById('importConfig').click()">Import Config</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>

@section Scripts {
<script>
document.addEventListener('DOMContentLoaded', () => {
    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
    const apiTestsContainer = document.getElementById('apiTestsContainer');
    const apiTestsStatus = document.getElementById('apiTestsStatus');

    function newTestCard(id='') {
        if(!id) id = crypto.randomUUID().replace(/-/g,'');
        const div = document.createElement('div');
        div.className = 'border rounded p-2 mb-2 api-test';
        div.dataset.id = id;
        div.innerHTML = `
            <div class="row g-2 mb-1">
                <div class="col-8">
                    <input class="form-control form-control-sm api-desc" placeholder="Description" />
                </div>
                <div class="col-4 text-end">
                    <button type="button" class="btn btn-outline-danger btn-sm delete-test-btn">Delete</button>
                </div>
            </div>
            <input class="form-control form-control-sm mb-2 api-path" placeholder="Full script path (ps1 or exe)" />
            <div class="small fw-semibold mb-1">Parameters</div>
            <div class="params" style="max-height:120px; overflow:auto;">
                <div class="text-muted small empty-params">No parameters</div>
            </div>
            <button type="button" class="btn btn-outline-secondary btn-sm add-param-btn mt-1">Add Param</button>`;
        return div;
    }

    function addParamRow(paramsDiv, name='', value='') {
        const empty = paramsDiv.querySelector('.empty-params');
        if (empty) empty.remove();
        const row = document.createElement('div');
        row.className = 'input-group input-group-sm mb-1 param-row';
        row.innerHTML = `
            <input class="form-control param-name" placeholder="Name" value="${name}" />
            <input class="form-control param-value" placeholder="Value" value="${value}" />
            <button type="button" class="btn btn-outline-danger param-del-btn">&times;</button>`;
        paramsDiv.appendChild(row);
    }

    document.getElementById('addApiTestBtn').addEventListener('click', () => {
        apiTestsContainer.appendChild(newTestCard());
    });

    apiTestsContainer.addEventListener('click', e => {
        if (e.target.classList.contains('delete-test-btn')) {
            e.target.closest('.api-test').remove();
        } else if (e.target.classList.contains('add-param-btn')) {
            const paramsDiv = e.target.closest('.api-test').querySelector('.params');
            addParamRow(paramsDiv);
        } else if (e.target.classList.contains('param-del-btn')) {
            const paramRow = e.target.closest('.param-row');
            const paramsDiv = e.target.closest('.params');
            paramRow.remove();
            if (paramsDiv.querySelectorAll('.param-row').length === 0) {
                const empty = document.createElement('div');
                empty.className = 'text-muted small empty-params';
                empty.textContent = 'No parameters';
                paramsDiv.appendChild(empty);
            }
        }
    });

    document.getElementById('saveApiTestsBtn').addEventListener('click', async () => {
        apiTestsStatus.textContent = 'Saving...';
        const tests = [];
        apiTestsContainer.querySelectorAll('.api-test').forEach(card => {
            const id = card.dataset.id;
            const desc = card.querySelector('.api-desc').value.trim();
            const path = card.querySelector('.api-path').value.trim();
            if (!path) return; // skip invalid
            const params = [];
            card.querySelectorAll('.param-row').forEach(pr => {
                const name = pr.querySelector('.param-name').value.trim();
                const value = pr.querySelector('.param-value').value.trim();
                if (name) params.push({ name, value });
            });
            tests.push({ id, description: desc, scriptPath: path, parameters: params });
        });

        try {
            const resp = await fetch('/Config?handler=SaveApiTests', {
                method:'POST',
                headers:{
                    'Content-Type':'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({ tests })
            });
            const result = await resp.json();
            apiTestsStatus.textContent = result.message;
            apiTestsStatus.className = result.success ? 'small text-success' : 'small text-danger';
        } catch(e) {
            apiTestsStatus.textContent = 'Error: ' + e.message;
            apiTestsStatus.className = 'small text-danger';
        }
    });

    // Dashboard options save
    document.getElementById('saveDashboardOptions').addEventListener('click', async () => {
        const showApps = document.getElementById('showAppsToggle').checked;
        const el = document.getElementById('dashboardOptionsStatus');
        el.textContent = 'Saving...';
        try {
            const resp = await fetch('/Config?handler=SaveDashboardOptions', {
                method:'POST',
                headers:{
                    'Content-Type':'application/x-www-form-urlencoded',
                    'RequestVerificationToken': token
                },
                body:new URLSearchParams({ showApps })
            });
            const result = await resp.json();
            el.textContent = result.message;
            el.className = result.success ? 'text-success small' : 'text-danger small';
        } catch(e) {
            el.textContent = 'Error: '+ e.message;
            el.className = 'text-danger small';
        }
    });

    // Servers
    document.getElementById('addServerBtn').addEventListener('click', () => {
        const tbody = document.getElementById('serversTableBody');
        const tr = document.createElement('tr');
        tr.innerHTML = `
            <td><input class="form-control form-control-sm" data-field="hostname" required/></td>
            <td><input class="form-control form-control-sm" data-field="userid"/></td>
            <td><input class="form-control form-control-sm" data-field="description"/></td>
            <td><button type="button" class="btn btn-outline-danger btn-sm delete-server-btn">Del</button></td>`;
        tbody.appendChild(tr);
    });
    document.addEventListener('click', e => {
        if (e.target.classList.contains('delete-server-btn'))
            e.target.closest('tr').remove();
        if (e.target.classList.contains('delete-app-btn'))
            e.target.closest('tr').remove();
    });
    document.getElementById('saveServersBtn').addEventListener('click', async () => {
        const servers = [];
        document.querySelectorAll('#serversTableBody tr').forEach(tr => {
            const hostname = tr.querySelector('[data-field="hostname"]').value.trim();
            if (!hostname) return;
            servers.push({
                hostname,
                userid: tr.querySelector('[data-field="userid"]').value.trim(),
                description: tr.querySelector('[data-field="description"]').value.trim()
            });
        });
        try {
            const resp = await fetch('/Config?handler=SaveServers', {
                method:'POST',
                headers:{
                    'Content-Type':'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({ servers })
            });
            const result = await resp.json();
            showStatus(result.message, result.success ? 'success':'danger');
            if (result.success) document.getElementById('serverCount').textContent = servers.length;
        } catch(e) {
            showStatus('Error saving servers: '+ e.message,'danger');
        }
    });

    // Apps
    document.getElementById('addAppBtn').addEventListener('click', () => {
        const tbody = document.getElementById('appsTableBody');
        const tr = document.createElement('tr');
        tr.innerHTML = `
            <td><input class="form-control form-control-sm" data-field="appname" required/></td>
            <td><input class="form-control form-control-sm" data-field="exepath" required/></td>
            <td><button type="button" class="btn btn-outline-danger btn-sm delete-app-btn">Del</button></td>`;
        tbody.appendChild(tr);
    });
    document.getElementById('saveAppsBtn').addEventListener('click', async () => {
        const apps = {};
        document.querySelectorAll('#appsTableBody tr').forEach(tr => {
            const name = tr.querySelector('[data-field="appname"]').value.trim();
            const path = tr.querySelector('[data-field="exepath"]').value.trim();
            if (name && path) apps[name] = path;
        });
        try {
            const resp = await fetch('/Config?handler=SaveApps', {
                method:'POST',
                headers:{
                    'Content-Type':'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({ apps })
            });
            const result = await resp.json();
            showStatus(result.message, result.success ? 'success':'danger');
            if (result.success) document.getElementById('appCount').textContent = Object.keys(apps).length;
        } catch(e) {
            showStatus('Error saving apps: '+ e.message,'danger');
        }
    });

    // Staging path
    document.getElementById('saveStagingPath').addEventListener('click', async () => {
        const stagingPath = document.getElementById('stagingPath').value.trim();
        if (!stagingPath) { showStatus('Staging path required','danger'); return; }
        try {
            const resp = await fetch('/Config?handler=SaveStagingPath', {
                method:'POST',
                headers:{
                    'Content-Type':'application/x-www-form-urlencoded',
                    'RequestVerificationToken': token
                },
                body:new URLSearchParams({ stagingPath })
            });
            const result = await resp.json();
            showStatus(result.message, result.success ? 'success':'danger');
        } catch(e) {
            showStatus('Error saving staging path: '+ e.message,'danger');
        }
    });

    // Export / Import unchanged (adds api tests now if needed)
    window.exportConfiguration = function() {
        const servers = [];
        document.querySelectorAll('#serversTableBody tr').forEach(tr => {
            const hostname = tr.querySelector('[data-field="hostname"]').value.trim();
            if (!hostname) return;
            servers.push({
                hostname,
                userid: tr.querySelector('[data-field="userid"]').value.trim(),
                description: tr.querySelector('[data-field="description"]').value.trim()
            });
        });
        const apps = {};
        document.querySelectorAll('#appsTableBody tr').forEach(tr => {
            const a = tr.querySelector('[data-field="appname"]').value.trim();
            const p = tr.querySelector('[data-field="exepath"]').value.trim();
            if (a && p) apps[a] = p;
        });
        const tests = [];
        apiTestsContainer.querySelectorAll('.api-test').forEach(card => {
            const id = card.dataset.id;
            const description = card.querySelector('.api-desc').value.trim();
            const scriptPath = card.querySelector('.api-path').value.trim();
            const parameters = [];
            card.querySelectorAll('.param-row').forEach(pr => {
                const name = pr.querySelector('.param-name').value.trim();
                const value = pr.querySelector('.param-value').value.trim();
                if (name) parameters.push({ name, value });
            });
            if(scriptPath) tests.push({ id, description, scriptPath, parameters });
        });
        const cfg = {
            stagingPath: document.getElementById('stagingPath').value,
            showAppsOnDashboard: document.getElementById('showAppsToggle').checked,
            servers, apps, apiTests: tests,
            exported: new Date().toISOString()
        };
        const blob = new Blob([JSON.stringify(cfg,null,2)], {type:'application/json'});
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'config-export.json';
        a.click();
        URL.revokeObjectURL(url);
    };

    window.importConfiguration = function(evt) {
        const file = evt.target.files[0];
        if (!file) return;
        const reader = new FileReader();
        reader.onload = e => {
            try {
                const cfg = JSON.parse(e.target.result);
                if (cfg.stagingPath) document.getElementById('stagingPath').value = cfg.stagingPath;
                if (typeof cfg.showAppsOnDashboard === 'boolean')
                    document.getElementById('showAppsToggle').checked = cfg.showAppsOnDashboard;

                if (cfg.servers) {
                    const tbody = document.getElementById('serversTableBody');
                    tbody.innerHTML = '';
                    cfg.servers.forEach(s => {
                        const tr = document.createElement('tr');
                        tr.innerHTML = `
                            <td><input class="form-control form-control-sm" value="${s.hostname||''}" data-field="hostname" required/></td>
                            <td><input class="form-control form-control-sm" value="${s.userid||''}" data-field="userid"/></td>
                            <td><input class="form-control form-control-sm" value="${s.description||''}" data-field="description"/></td>
                            <td><button type="button" class="btn btn-outline-danger btn-sm delete-server-btn">Del</button></td>`;
                        tbody.appendChild(tr);
                    });
                }
                if (cfg.apps) {
                    const tbody = document.getElementById('appsTableBody');
                    tbody.innerHTML = '';
                    Object.entries(cfg.apps).forEach(([k,v]) => {
                        const tr = document.createElement('tr');
                        tr.innerHTML = `
                            <td><input class="form-control form-control-sm" value="${k}" data-field="appname" required/></td>
                            <td><input class="form-control form-control-sm" value="${v}" data-field="exepath" required/></td>
                            <td><button type="button" class="btn btn-outline-danger btn-sm delete-app-btn">Del</button></td>`;
                        tbody.appendChild(tr);
                    });
                }
                if (cfg.apiTests) {
                    apiTestsContainer.innerHTML = '';
                    cfg.apiTests.forEach(t => {
                        const card = newTestCard(t.id);
                        card.querySelector('.api-desc').value = t.description || '';
                        card.querySelector('.api-path').value = t.scriptPath || '';
                        const paramsDiv = card.querySelector('.params');
                        paramsDiv.innerHTML = '';
                        if (t.parameters && t.parameters.length) {
                            t.parameters.forEach(p => addParamRow(paramsDiv, p.name || '', p.value || ''));
                        } else {
                            paramsDiv.innerHTML = '<div class="text-muted small empty-params">No parameters</div>';
                        }
                        apiTestsContainer.appendChild(card);
                    });
                }
                showStatus('Imported (not saved).','success');
            } catch(err) {
                showStatus('Import error: '+ err.message,'danger');
            }
        };
        reader.readAsText(file);
    };

    function showStatus(msg,type='info'){
        const statusArea = document.getElementById('statusArea');
        const statusMessage = document.getElementById('statusMessage');
        statusArea.className = `alert alert-${type} py-2`;
        statusMessage.textContent = msg;
        statusArea.classList.remove('d-none');
        setTimeout(()=>statusArea.classList.add('d-none'), 3500);
    }
});
</script>
}