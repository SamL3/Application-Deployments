@page
@model ApplicationDeployment.Pages.DashboardModel
@inject IConfiguration Configuration
@{
    ViewData["Title"] = "Dashboard";
    var showApps = Configuration.GetValue<bool>("Dashboard:ShowApps", false);
}

<div class="container-fluid py-3">
    <h1 class="h3 fw-semibold text-primary mb-4">Dashboard</h1>

    <div class="mb-3 d-flex align-items-center gap-2">
        <button id="refreshHostsBtn" class="btn btn-sm btn-outline-primary">Refresh Host Availability</button>
        <div class="flex-grow-1">
            <div class="progress" style="height:20px;" id="hostScanProgressWrapper">
                <div id="hostScanBar" class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width:0%">Idle</div>
            </div>
        </div>
        <span id="hostScanSummary" class="small text-muted"></span>
    </div>

    <div class="row g-3 mt-3" id="serversRow"></div>
</div>

@section Scripts {
<style>
    .server-card { min-height: 360px; position: relative; }
    .builds-list { font-size: .8rem; max-height: 160px; overflow:auto; }
    .spinner-sm { width:1.5rem; height:1.5rem; }
    .progress { background-color:#e9ecef; }
    .section-title { font-size:.75rem; letter-spacing:.05em; text-transform:uppercase; margin-top:.75rem; color:#6c757d;}
    .collapse-toggle { cursor:pointer; }
    .builds-list table td { padding:.25rem .5rem; }
    .app-name-trunc { max-width:180px; white-space:nowrap; overflow:hidden; text-overflow:ellipsis; }
    .server-header { min-height: 2.5rem; }
    .server-hostname { font-weight: 600; }
    .server-description { font-size: 0.65rem; color: #6c757d; font-weight: normal; margin-left:.5rem; max-width:120px; white-space:nowrap; overflow:hidden; text-overflow:ellipsis;}
</style>

<script>
document.addEventListener('DOMContentLoaded', () => {
    const SHOW_APPS = @(showApps ? "true" : "false");
    const serversRow = document.getElementById('serversRow');
    const refreshBtn = document.getElementById('refreshHostsBtn');
    const scanBar = document.getElementById('hostScanBar');
    const scanSummary = document.getElementById('hostScanSummary');

    let pollTimer = null;

    refreshBtn.addEventListener('click', async () => {
        await triggerScan();
    });

    // Kick off initial polling (service starts a scan on startup)
    startPolling();

    async function triggerScan() {
        try {
            refreshBtn.disabled = true;
            scanBar.classList.add('progress-bar-animated');
            scanBar.textContent = 'Starting...';
            scanBar.style.width = '0%';
            scanSummary.textContent = '';
            await fetch('/Dashboard?handler=RefreshHosts', { method: 'POST' });
            startPolling(true);
        } catch (e) {
            scanBar.classList.remove('progress-bar-animated');
            scanBar.classList.add('bg-danger');
            scanBar.textContent = 'Error starting scan';
        }
    }

    function startPolling(clearServers = false) {
        if (pollTimer) clearInterval(pollTimer);
        if (clearServers) serversRow.innerHTML = '';
        pollOnce(); // immediate
        pollTimer = setInterval(pollOnce, 1500);
    }

    async function pollOnce() {
        try {
            const resp = await fetch('/Dashboard?handler=HostStatuses', { cache: 'no-store' });
            if (!resp.ok) throw new Error('HTTP ' + resp.status);
            const data = await resp.json();
            updateProgress(data);
            if (!data.scanInProgress) {
                if (pollTimer) { clearInterval(pollTimer); pollTimer = null; }
                refreshBtn.disabled = false;
                loadServers(); // load cards after scan completes
            }
        } catch (e) {
            scanBar.classList.remove('progress-bar-animated');
            scanBar.classList.add('bg-danger');
            scanBar.textContent = 'Status error';
        }
    }

    function updateProgress(data) {
        const { scanInProgress, completed, total } = data;
        if (!total) {
            scanBar.style.width = '100%';
            scanBar.textContent = 'No servers';
            scanBar.classList.remove('progress-bar-animated');
            return;
        }
        const pct = Math.min(100, Math.round((completed / total) * 100));
        scanBar.style.width = pct + '%';
        scanBar.textContent = scanInProgress ? `Scanning ${completed}/${total}` : 'Complete';
        scanBar.classList.toggle('progress-bar-animated', scanInProgress);
        scanSummary.textContent = scanInProgress
            ? `Scanning... (${pct}%)`
            : `Completed: ${completed}/${total}`;
    }

    async function loadServers() {
        serversRow.innerHTML = '<div class="col-12 text-center text-muted py-5">Loading servers...</div>';
        try {
            const resp = await fetch('/Dashboard?handler=Servers', { cache: 'no-store' });
            if (!resp.ok) throw new Error('HTTP ' + resp.status);
            const servers = await resp.json();
            if (!servers || servers.length === 0) {
                serversRow.innerHTML = '<div class="col-12 text-center text-muted py-5">No hosts.</div>';
                return;
            }
            serversRow.innerHTML = '';
            servers.forEach(s => {
                const col = document.createElement('div');
                col.className = 'col-xl-3 col-lg-4 col-md-6';
                col.innerHTML = serverCardSkeleton(s);
                serversRow.appendChild(col);
                if (s.accessible) {
                    loadServerDetails(s.host);
                }
            });
        } catch (e) {
            serversRow.innerHTML = `<div class="col-12 text-danger text-center py-5">Error loading servers: ${escapeHtml(e.message)}</div>`;
        }
    }

    function serverCardSkeleton(server) {
        const hostname = server.host;
        const accessible = server.accessible === true;
        const description = server.description || '';
        const msg = server.message || (accessible ? '' : 'Offline');
        const latency = accessible && server.latencyMs != null ? `${server.latencyMs} ms` : '';
        const headerBadge = accessible
            ? `<span class="badge text-bg-success ms-2">Online</span>`
            : `<span class="badge text-bg-danger ms-2">Offline</span>`;

        return `
        <div class="card shadow-sm server-card ${accessible ? '' : 'border-danger'}" data-server="${escapeHtml(hostname)}">
            <div class="card-header d-flex justify-content-between align-items-start py-2 server-header">
                <div class="d-flex align-items-center flex-wrap">
                    <span class="server-hostname small">${escapeHtml(hostname)}</span>
                    ${description ? `<span class="server-description" title="${escapeHtml(description)}">${escapeHtml(description)}</span>` : ''}
                    ${headerBadge}
                </div>
                ${accessible ? '<div class="spinner-border spinner-sm text-secondary ms-2" role="status"></div>' : ''}
            </div>
            <div class="card-body p-2">
                <div class="section-title mt-0">Disk (C:)</div>
                <div class="disk-area small ${accessible ? 'text-muted' : 'text-secondary'}">${accessible ? 'Loading...' : 'N/A'}</div>
                <div class="section-title">Deployments</div>
                <div class="deployments-area small ${accessible ? 'text-muted' : 'text-secondary'}">${accessible ? 'Loading...' : 'N/A'}</div>
                ${@(showApps ? "true" : "false") && true ? `
                    <div class="section-title">Applications</div>
                    <div class="apps-area small ${accessible ? 'text-muted' : 'text-secondary'}">${accessible ? 'Loading...' : 'N/A'}</div>` : ``}
            </div>
            <div class="card-footer bg-light py-1 small text-muted status-line">
                ${accessible
                    ? `Latency: ${latency || 'n/a'}`
                    : `Offline${msg ? ' - ' + escapeHtml(msg) : ''}`}
            </div>
        </div>`;
    }

    async function loadServerDetails(server) {
        const hostname = typeof server === 'string' ? server : server.hostname || server.host;
        const card = document.querySelector(`.server-card[data-server="${CSS.escape(hostname)}"]`);
        if (!card) return;
        const spinner = card.querySelector('.spinner-border');
        const diskArea = card.querySelector('.disk-area');
        const deploymentsArea = card.querySelector('.deployments-area');
        const appsArea = card.querySelector('.apps-area');
        const statusLine = card.querySelector('.status-line');

        try {
            const resp = await fetch(`/Dashboard?handler=ServerDetails&server=${encodeURIComponent(hostname)}`, { cache:'no-store' });
            if (!resp.ok) throw new Error('HTTP ' + resp.status);
            const data = await resp.json();
            renderDisks(diskArea, data.disks || []);
            renderDeployments(deploymentsArea, data.deployments || []);
            if (SHOW_APPS && appsArea) renderApps(appsArea, data.apps || []);
            statusLine.textContent =
                (SHOW_APPS ? `Apps: ${(data.apps||[]).length} | ` : '') +
                `Builds: ${data.totalBuildCount ?? 0} | Size: ${(data.totalBuildSizeMB ?? 0).toFixed(1)} MB`;
        } catch (e) {
            diskArea.innerHTML = `<span class="text-danger">Error</span>`;
            deploymentsArea.innerHTML = `<span class="text-danger">Error: ${escapeHtml(e.message)}</span>`;
            if (appsArea) appsArea.innerHTML = `<span class="text-danger">Error</span>`;
            statusLine.textContent = 'Error';
        } finally {
            if (spinner) spinner.remove();
        }
    }

    function renderDisks(container, disks) {
        if (!disks.length) { container.innerHTML = '<span class="text-muted">No data</span>'; return; }
        container.innerHTML = '';
        disks.forEach(d => {
            const usedPct = d.size > 0 ? Math.round((1 - (d.free / d.size)) * 100) : 0;
            const barClass = usedPct > 85 ? 'bg-danger' : usedPct > 65 ? 'bg-warning' : 'bg-success';
            const freeTxt = formatBytes(d.free);
            const sizeTxt = formatBytes(d.size);
            const div = document.createElement('div');
            div.className = 'mb-2';
            div.innerHTML = `
                <div class="d-flex justify-content-between small">
                    <span>${escapeHtml(d.name)}${d.volumeName ? ' - ' + escapeHtml(d.volumeName) : ''}</span>
                    <span>${freeTxt} free</span>
                </div>
                <div class="progress" style="height:10px;">
                    <div class="progress-bar ${barClass}" style="width:${usedPct}%"></div>
                </div>
                <div class="d-flex justify-content-between small text-muted">
                    <span>${usedPct}% used</span>
                    <span>${sizeTxt}</span>
                </div>`;
            container.appendChild(div);
        });
    }

    function renderDeployments(container, deployments) {
        if (!deployments.length) { container.innerHTML = '<span class="text-muted">No deployments</span>'; return; }
        const totalBuilds = deployments.reduce((s,a)=>s+a.buildCount,0);
        const totalSize = deployments.reduce((s,a)=>s+a.totalSizeMB,0);
        const wrapper = document.createElement('div');
        wrapper.className = 'builds-list';
        wrapper.innerHTML = `
            <div class="small mb-1">
                <span class="badge text-bg-secondary">Apps: ${deployments.length}</span>
                <span class="badge text-bg-info">Builds: ${totalBuilds}</span>
                <span class="badge text-bg-dark">Size: ${totalSize.toFixed(1)} MB</span>
            </div>
            <table class="table table-sm table-hover mb-0">
                <thead class="table-light">
                    <tr>
                        <th class="small">App</th>
                        <th class="small text-end">Builds</th>
                        <th class="small text-end">Size MB</th>
                    </tr>
                </thead>
                <tbody>
                    ${deployments.map(app =>
                        `<tr class="collapse-toggle" data-app="${escapeHtml(app.app)}">
                            <td class="app-name-trunc">${escapeHtml(app.app)}</td>
                            <td class="text-end">${app.buildCount}</td>
                            <td class="text-end">${app.totalSizeMB.toFixed(1)}</td>
                        </tr>
                        <tr class="d-none builds-row" data-app="${escapeHtml(app.app)}">
                            <td colspan="3">
                                ${app.builds.length
                                    ? `<div class="small">
                                        ${app.builds.map(b =>
                                            `<div class="d-flex justify-content-between">
                                                <span>${escapeHtml(b.name)}</span>
                                                <span class="text-muted">${b.sizeMB.toFixed(2)} MB</span>
                                             </div>`).join('')}
                                      </div>`
                                    : '<span class="text-muted small">No builds</span>'}
                            </td>
                        </tr>`
                    ).join('')}
                </tbody>
            </table>`;
        container.innerHTML = '';
        container.appendChild(wrapper);
        wrapper.querySelectorAll('.collapse-toggle').forEach(row => {
            row.addEventListener('click', () => {
                const app = row.getAttribute('data-app');
                const detailRow = wrapper.querySelector(`.builds-row[data-app="${CSS.escape(app)}"]`);
                if (detailRow) detailRow.classList.toggle('d-none');
            });
        });
    }

    function renderApps(container, apps) {
        if (!apps.length) { container.innerHTML = '<span class="text-muted">No applications</span>'; return; }
        const max = 12;
        const short = apps.slice(0,max);
        container.innerHTML = `
            <div class="apps-list">
                ${short.map(a => `
                    <div class="d-flex justify-content-between">
                        <span class="text-truncate" style="max-width:140px;" title="${escapeHtml(a.displayName)}">${escapeHtml(a.displayName)}</span>
                        <span class="text-muted">${escapeHtml(a.displayVersion || '')}</span>
                    </div>`).join('')}
                ${apps.length > max ? `<div class="mt-1"><a href="#" class="small" data-action="expand-apps">Show all (${apps.length})</a></div>` : ''}
            </div>`;
        if (apps.length > max) {
            container.querySelector('[data-action="expand-apps"]').addEventListener('click', e => {
                e.preventDefault();
                container.innerHTML = `
                    <div class="apps-list">
                        ${apps.map(a => `
                            <div class="d-flex justify-content-between">
                                <span class="text-truncate" style="max-width:140px;" title="${escapeHtml(a.displayName)}">${escapeHtml(a.displayName)}</span>
                                <span class="text-muted">${escapeHtml(a.displayVersion || '')}</span>
                            </div>`).join('')}
                    </div>`;
            });
        }
    }

    function formatBytes(bytes) {
        if (bytes === 0) return '0 B';
        if (!bytes) return 'n/a';
        const k = 1024;
        const sizes = ['B','KB','MB','GB','TB'];
        const i = Math.floor(Math.log(bytes)/Math.log(k));
        return (bytes/Math.pow(k,i)).toFixed(i===0?0:1) + ' ' + sizes[i];
    }

    function escapeHtml(s) {
        if (!s) return '';
        return s.replace(/[&<>"']/g, c => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[c]));
    }
});
</script>
}