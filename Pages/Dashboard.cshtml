@page
@model ApplicationDeployment.Pages.DashboardModel
@{
    ViewData["Title"] = "Deployment Dashboard";
}

<div class="container my-4">
    <h1 class="display-6 text-primary mb-3">Deployment Dashboard</h1>

    <div class="row g-4">
        <!-- Servers list -->
        <div class="col-lg-3">
            <div class="card h-100 shadow-sm">
                <div class="card-header bg-light fw-semibold">Servers</div>
                <div class="card-body p-2">
                    <div class="list-group" id="serversList">
                        @foreach (var s in Model.Servers)
                        {
                            <button type="button" class="list-group-item list-group-item-action server-btn" data-server="@s.Value">@s.Text</button>
                        }
                    </div>
                    <div class="mt-3 small text-muted">Select a server to load details.</div>
                </div>
            </div>
        </div>

        <!-- Server details -->
        <div class="col-lg-6">
            <div class="card h-100 shadow-sm">
                <div class="card-header bg-light fw-semibold d-flex justify-content-between align-items-center">
                    <span>Server Details</span>
                    <small id="selectedServerLabel" class="text-muted">(none)</small>
                </div>
                <div class="card-body p-3">
                    <div id="diskSection" class="mb-3">
                        <h6>Disk Usage</h6>
                        <div id="diskList" class="mb-2"></div>
                    </div>

                    <div id="appsSection">
                        <h6>Installed Applications</h6>
                        <div class="table-responsive" style="max-height:42vh; overflow:auto;">
                            <table class="table table-sm table-striped mb-0">
                                <thead>
                                    <tr>
                                        <th>Application</th>
                                        <th class="text-end">Version</th>
                                        <th class="text-end">Publisher</th>
                                    </tr>
                                </thead>
                                <tbody id="appsTableBody">
                                    <tr><td colspan="3" class="text-muted small">Select a server</td></tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Actions / Status -->
        <div class="col-lg-3">
            <div class="card h-100 shadow-sm">
                <div class="card-header bg-light fw-semibold">Actions & Status</div>
                <div class="card-body d-flex flex-column">
                    <button id="refreshBtn" class="btn btn-outline-primary mb-3" disabled>Refresh Selected</button>
                    <div id="statusBox" class="small text-muted mb-3">Ready</div>

                    <div id="chartHint" class="mt-auto small text-muted">Disk bars show free space percentage.</div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>
(function () {
    const serverButtons = document.querySelectorAll('.server-btn');
    const selectedLabel = document.getElementById('selectedServerLabel');
    const appsTableBody = document.getElementById('appsTableBody');
    const diskList = document.getElementById('diskList');
    const refreshBtn = document.getElementById('refreshBtn');
    const statusBox = document.getElementById('statusBox');
    let currentServer = null;

    serverButtons.forEach(btn => btn.addEventListener('click', () => {
        serverButtons.forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        currentServer = btn.dataset.server;
        selectedLabel.textContent = currentServer;
        loadServerDetails(currentServer);
        refreshBtn.disabled = false;
    }));

    refreshBtn.addEventListener('click', () => {
        if (currentServer) loadServerDetails(currentServer, true);
    });

    async function loadServerDetails(server, force = false) {
        statusBox.textContent = 'Loading...';
        diskList.innerHTML = '';
        appsTableBody.innerHTML = '<tr><td colspan="3" class="text-muted small">Loading...</td></tr>';

        try {
            const resp = await fetch(`/Dashboard?handler=ServerInfo&server=${encodeURIComponent(server)}`);
            if (!resp.ok) throw new Error('HTTP ' + resp.status);
            const data = await resp.json();

            renderDisks(data.disks || []);
            renderApps(data.apps || []);
            statusBox.textContent = 'Loaded ' + (data.apps?.length ?? 0) + ' apps';
        } catch (e) {
            console.error(e);
            statusBox.textContent = 'Error fetching server info';
            appsTableBody.innerHTML = `<tr><td colspan="3" class="text-danger small">Error: ${e.message}</td></tr>`;
        }
    }

    function renderDisks(disks) {
        diskList.innerHTML = '';
        if (!disks || disks.length === 0) {
            diskList.innerHTML = '<div class="small text-muted">No disk data</div>';
            return;
        }
        disks.forEach(d => {
            const used = d.size > 0 ? Math.round((1 - (d.free / d.size)) * 100) : 0;
            const div = document.createElement('div');
            div.className = 'mb-2';
            div.innerHTML = `
                <div class="d-flex justify-content-between small mb-1">
                    <div>${d.name} ${d.volumeName ? '- ' + d.volumeName : ''}</div>
                    <div>${formatBytes(d.free)} free / ${formatBytes(d.size)}</div>
                </div>
                <div class="progress" style="height:14px">
                  <div class="progress-bar ${used > 85 ? 'bg-danger' : used > 60 ? 'bg-warning' : 'bg-success'}"
                       role="progressbar" style="width:${used}%">${used}%</div>
                </div>`;
            diskList.appendChild(div);
        });
    }

    function renderApps(apps) {
        appsTableBody.innerHTML = '';
        if (!apps || apps.length === 0) {
            appsTableBody.innerHTML = '<tr><td colspan="3" class="text-muted small">No installed applications discovered</td></tr>';
            return;
        }
        apps.forEach(a => {
            const tr = document.createElement('tr');
            tr.innerHTML = `<td class="text-truncate" style="max-width:45ch;">${escapeHtml(a.displayName)}</td>
                            <td class="text-end small text-muted">${escapeHtml(a.displayVersion ?? '')}</td>
                            <td class="text-end small text-muted">${escapeHtml(a.publisher ?? '')}</td>`;
            appsTableBody.appendChild(tr);
        });
    }

    function formatBytes(bytes) {
        if (bytes === null || bytes === undefined) return 'n/a';
        const sizes = ['B','KB','MB','GB','TB'];
        if (bytes === 0) return '0 B';
        const i = Math.floor(Math.log(bytes) / Math.log(1024));
        return (bytes / Math.pow(1024, i)).toFixed(1) + ' ' + sizes[i];
    }

    function escapeHtml(s) {
        if (!s) return '';
        return s.replace(/[&<>"']/g, c => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[c]));
    }
})();
</script>
}