@page
@using System.Text.Json
@model ApplicationDeployment.Pages.TestModel

<h1 class="page-title">API Tests</h1>

<form class="d-none">
    @Html.AntiForgeryToken()
</form>

<div class="d-flex justify-content-between align-items-center mb-3 flex-wrap gap-2">
    <div class="form-check form-switch">
        <input class="form-check-input" type="checkbox" id="wrapToggle" checked>
        <label class="form-check-label small" for="wrapToggle">Word Wrap</label>
    </div>
    <button class="btn btn-sm btn-outline-primary" id="refreshAllBtn" type="button">Refresh</button>
</div>

@if (Model.ApiTests.Count == 0)
{
    <div class="alert alert-info small">No tests configured. Define them in Config page.</div>
}
else
{
    <div class="row g-4">
        @foreach (var t in Model.ApiTests)
        {
            <div class="col-12">
                <div class="card shadow-sm test-card" data-test-id="@t.Id">
                    <div class="card-header d-flex align-items-center flex-wrap gap-2">
                        <div>
                            <div class="fw-semibold">@t.Description</div>
                            <div class="small text-muted">@t.ScriptPath</div>
                            <div class="small text-muted">Id: @t.Id</div>
                        </div>
                        <div class="ms-auto d-flex gap-2">
                            <button type="button" class="btn btn-sm btn-outline-secondary clear-btn">Clear</button>
                            <button type="button" class="btn btn-sm btn-outline-success save-btn" disabled>Save</button>
                            <button type="button" class="btn btn-sm btn-primary run-btn">Run</button>
                        </div>
                    </div>
                    <div class="card-body p-2 d-flex flex-column">
                        <div class="row g-2 mb-2 small param-block">
                            <div class="col-12">
                                <div class="input-group input-group-sm">
                                    <span class="input-group-text">Docker Cmd</span>
                                    <input class="form-control script-path" value="@t.ScriptPath" readonly />
                                </div>
                            </div>
                            @if (t.Parameters.Count == 0)
                            {
                                <div class="col-12 text-muted fst-italic">No parameters</div>
                            }
                            else
                            {
                                foreach (var p in t.Parameters)
                                {
                                    <div class="col-md-4 param-row">
                                        <div class="input-group input-group-sm">
                                            <span class="input-group-text" title="@p.Name">@p.Name</span>
                                            <input type="hidden" class="param-name" value="@p.Name" />
                                            <input class="form-control param-value" value="@p.Value" placeholder="value" />
                                        </div>  
                                    </div>
                                }
                            }
                        </div>
                        <div class="small text-muted mb-1">
                            Command: <code class="cmd-preview">(idle)</code>
                        </div>
                        <div class="output-toolbar">
                            <button type="button" class="btn btn-outline-secondary btn-sm copy-btn" title="Copy">Copy</button>
                            <button type="button" class="btn btn-outline-secondary btn-sm clear-btn">Clear</button>
                            <button type="button" class="btn btn-outline-secondary btn-sm wrap-toggle-btn" data-state="on">Wrap: On</button>
                            <button type="button" class="btn btn-outline-secondary btn-sm find-btn">Find</button>
                            <button type="button" class="btn btn-outline-secondary btn-sm scroll-lock-btn" data-locked="false">Scroll Lock Off</button>
                        </div>
                        <pre class="output-box ansi-output wrap-on" data-autoscroll="true"></pre>
                        <div class="small text-muted mt-2 status-line">Idle</div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@section Scripts {
<style>
    .test-card { margin-bottom: 1rem; }
    .output-box { 
        background: #1e1e1e; 
        color: #d4d4d4; 
        font-family: 'Courier New', Consolas, monospace; 
        font-size: 0.85rem; 
        min-height: 200px; 
        max-height: 400px; 
        overflow-y: auto; 
        padding: 0.75rem; 
        white-space: pre-wrap; 
    }
    .output-box.wrap-on { white-space: pre-wrap; }
    .output-box.wrap-off { white-space: pre; }
    .cmd-preview { 
        background: #f8f9fa; 
        padding: 0.25rem 0.5rem; 
        border-radius: 0.25rem; 
        color: #198754; /* Bootstrap success green */
        font-weight: 600;
    }
    .run-btn.busy {
        pointer-events: none;
        opacity: .65;
    }
</style>

<script>
document.addEventListener('DOMContentLoaded', () => {
    const tokenEl = document.querySelector('input[name="__RequestVerificationToken"]');
    const token = tokenEl ? tokenEl.value : '';

    function getProp(obj, name) {
        return obj[name] ?? obj[name.charAt(0).toLowerCase() + name.slice(1)];
    }

    async function runTest(testCard, testId) {
        const runBtn = testCard.querySelector('.run-btn');
        const outputBox = testCard.querySelector('.output-box');
        const statusLine = testCard.querySelector('.status-line');
        const cmdPreview = testCard.querySelector('.cmd-preview');

        if (!runBtn) return;

        // Guard to always re-enable
        let completed = false;

        runBtn.disabled = true;
        runBtn.classList.add('busy');
        runBtn.textContent = 'Running...';
        statusLine.textContent = 'Running...';
        statusLine.className = 'small text-info mt-2';
        outputBox.textContent = '';

        const parameters = [];
        testCard.querySelectorAll('.param-row').forEach(row => {
            const name = row.querySelector('.param-name')?.value;
            const value = row.querySelector('.param-value')?.value;
            if (name) parameters.push({ Name: name, Value: value });
        });

        try {
            const response = await fetch('/Test?handler=Run', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({ Id: testId, Parameters: parameters })
            });

            const text = await response.text();
            let result;
            try {
                result = text ? JSON.parse(text) : {};
            } catch (parseErr) {
                result = { message: 'Invalid JSON response', raw: text, success: false };
            }

            console.debug('RunTest result:', result);

            const command = getProp(result, 'Command');
            const outputProp = getProp(result, 'Output');
            const errorProp = getProp(result, 'Error');
            const success = getProp(result, 'Success');
            const exitCode = getProp(result, 'ExitCode');
            const durationMs = getProp(result, 'DurationMs');
            const message = result.message ?? result.Message;

            cmdPreview.textContent = command || (message ? '(error)' : '(unknown)');

            let output = '';
            if (outputProp) output += outputProp;
            if (errorProp) output += (output ? '\n' : '') + '=== STDERR ===\n' + errorProp;
            if (!output && message) output = message;
            outputBox.textContent = output || '(no output)';

            if (outputBox.dataset.autoscroll === 'true')
                outputBox.scrollTop = outputBox.scrollHeight;

            const duration = durationMs ? ` (${Number(durationMs).toFixed(0)}ms)` : '';
            if (success) {
                statusLine.textContent = `Completed successfully. Exit code: ${exitCode}${duration}`;
                statusLine.className = 'small text-success mt-2';
            } else {
                statusLine.textContent = `Failed. Exit code: ${exitCode ?? '-'}${duration}`;
                statusLine.className = 'small text-danger mt-2';
            }
        } catch (err) {
            console.error('Run error', err);
            cmdPreview.textContent = '(error)';
            outputBox.textContent = `Error: ${err.message}`;
            statusLine.textContent = 'Request failed';
            statusLine.className = 'small text-danger mt-2';
        } finally {
            completed = true;
            runBtn.disabled = false;
            runBtn.classList.remove('busy');
            runBtn.textContent = 'Run';
        }

        // Safety timeout in case finally is skipped (edge cases)
        setTimeout(() => {
            if (!completed) {
                runBtn.disabled = false;
                runBtn.classList.remove('busy');
                runBtn.textContent = 'Run';
            }
        }, 5000);
    }

    document.getElementById('refreshAllBtn')?.addEventListener('click', () => {
        window.location.reload();
    });

    document.addEventListener('click', async (e) => {
        const testCard = e.target.closest('.test-card');
        if (!testCard) return;
        const testId = testCard.dataset.testId;
        if (e.target.classList.contains('run-btn')) {
            if (!e.target.disabled) await runTest(testCard, testId);
        } else if (e.target.classList.contains('save-btn')) {
            await saveUserConfig(testCard, testId);
        } else if (e.target.classList.contains('clear-btn')) {
            clearOutput(testCard);
        } else if (e.target.classList.contains('copy-btn')) {
            copyOutput(testCard);
        } else if (e.target.classList.contains('wrap-toggle-btn')) {
            toggleWrap(testCard);
        } else if (e.target.classList.contains('find-btn')) {
            openFindModal(testCard);
        } else if (e.target.classList.contains('scroll-lock-btn')) {
            toggleScrollLock(testCard);
        }
    });

    document.addEventListener('input', (e) => {
        if (e.target.classList.contains('param-value')) {
            const testCard = e.target.closest('.test-card');
            const saveBtn = testCard.querySelector('.save-btn');
            if (saveBtn) {
                saveBtn.disabled = false;
                saveBtn.textContent = 'Save*';
            }
            updateCommandPreview(testCard);
        }
    });

    document.querySelectorAll('.test-card').forEach(card => updateCommandPreview(card));

    async function saveUserConfig(testCard, testId) {
        const saveBtn = testCard.querySelector('.save-btn');
        if (!saveBtn) return;
        const parameters = [];
        testCard.querySelectorAll('.param-row').forEach(row => {
            const name = row.querySelector('.param-name')?.value;
            const value = row.querySelector('.param-value')?.value;
            if (name) parameters.push({ Name: name, Value: value });
        });
        saveBtn.disabled = true;
        saveBtn.textContent = 'Saving...';
        try {
            const response = await fetch('/Test?handler=SaveUserConfig', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({ Id: testId, Parameters: parameters })
            });
            const result = await response.json();
            if (result.success) {
                saveBtn.textContent = 'Saved';
                saveBtn.className = 'btn btn-sm btn-success';
                setTimeout(() => {
                    saveBtn.textContent = 'Save';
                    saveBtn.className = 'btn btn-sm btn-outline-success';
                    saveBtn.disabled = true;
                }, 2000);
            } else {
                throw new Error('Save failed');
            }
        } catch {
            saveBtn.textContent = 'Error';
            saveBtn.className = 'btn btn-sm btn-danger';
            setTimeout(() => {
                saveBtn.textContent = 'Save';
                saveBtn.className = 'btn btn-sm btn-outline-success';
            }, 2000);
        }
    }

    function clearOutput(testCard) {
        const outputBox = testCard.querySelector('.output-box');
        const statusLine = testCard.querySelector('.status-line');
        const cmdPreview = testCard.querySelector('.cmd-preview');
        if (outputBox) outputBox.textContent = '';
        if (statusLine) {
            statusLine.textContent = 'Idle';
            statusLine.className = 'small text-muted mt-2';
        }
        if (cmdPreview) cmdPreview.textContent = '(idle)';
    }

    function copyOutput(testCard) {
        const outputBox = testCard.querySelector('.output-box');
        if (!outputBox) return;
        const text = outputBox.textContent;
        if (navigator.clipboard) {
            navigator.clipboard.writeText(text);
        } else {
            const ta = document.createElement('textarea');
            ta.value = text;
            document.body.appendChild(ta);
            ta.select();
            document.execCommand('copy');
            document.body.removeChild(ta);
        }
    }

    function toggleWrap(testCard) {
        const wrapBtn = testCard.querySelector('.wrap-toggle-btn');
        const outputBox = testCard.querySelector('.output-box');
        if (!wrapBtn || !outputBox) return;
        const isOn = wrapBtn.dataset.state === 'on';
        if (isOn) {
            wrapBtn.dataset.state = 'off';
            wrapBtn.textContent = 'Wrap: Off';
            outputBox.classList.remove('wrap-on');
            outputBox.classList.add('wrap-off');
        } else {
            wrapBtn.dataset.state = 'on';
            wrapBtn.textContent = 'Wrap: On';
            outputBox.classList.remove('wrap-off');
            outputBox.classList.add('wrap-on');
        }
    }

    function toggleScrollLock(testCard) {
        const scrollBtn = testCard.querySelector('.scroll-lock-btn');
        const outputBox = testCard.querySelector('.output-box');
        if (!scrollBtn || !outputBox) return;
        const isLocked = scrollBtn.dataset.locked === 'true';
        if (isLocked) {
            scrollBtn.dataset.locked = 'false';
            scrollBtn.textContent = 'Scroll Lock Off';
            outputBox.dataset.autoscroll = 'true';
        } else {
            scrollBtn.dataset.locked = 'true';
            scrollBtn.textContent = 'Scroll Lock On';
            outputBox.dataset.autoscroll = 'false';
        }
    }

    function updateCommandPreview(testCard) {
        const scriptPath = testCard.querySelector('.script-path')?.value || '';
        const cmdPreview = testCard.querySelector('.cmd-preview');
        if (!cmdPreview) return;
        let command = scriptPath;
        testCard.querySelectorAll('.param-row').forEach(row => {
            const name = row.querySelector('.param-name')?.value;
            const value = row.querySelector('.param-value')?.value;
            if (name) {
                command += ` -${name}`;
                if (value) command += ` ${value}`;
            }
        });
        cmdPreview.textContent = command || '(idle)';
    }

    function openFindModal(testCard) {
        const searchTerm = prompt('Search in output:');
        if (!searchTerm) return;
        const outputBox = testCard.querySelector('.output-box');
        if (!outputBox) return;
        const text = outputBox.textContent.toLowerCase();
        const idx = text.indexOf(searchTerm.toLowerCase());
        alert(idx === -1 ? 'Not found' : `Found at position ${idx}`);
    }
});
</script>
}