@page
@using System.Text.Json
@model ApplicationDeployment.Pages.TestModel

<h1 class="mb-3">API Tests</h1>

<form class="d-none">
    @Html.AntiForgeryToken()
</form>

<div class="d-flex justify-content-between align-items-center mb-3 flex-wrap gap-2">
    <div class="form-check form-switch">
        <input class="form-check-input" type="checkbox" id="wrapToggle" checked>
        <label class="form-check-label small" for="wrapToggle">Word Wrap</label>
    </div>
    <button class="btn btn-sm btn-outline-primary" id="refreshAllBtn" type="button">Refresh</button>
</div>

@if (Model.ApiTests.Count == 0)
{
    <div class="alert alert-info small">No tests configured. Define them in Config page.</div>
}
else
{
    <div class="row g-4">
        @foreach (var t in Model.ApiTests)
        {
            <div class="col-12">
                <div class="card shadow-sm test-card" data-test-id="@t.Id">
                    <div class="card-header d-flex align-items-center flex-wrap gap-2">
                        <div>
                            <div class="fw-semibold">@t.Description</div>
                            <div class="small text-muted">@t.ScriptPath</div>
                            <div class="small text-muted">Id: @t.Id</div>
                        </div>
                        <div class="ms-auto d-flex gap-2">
                            <button type="button" class="btn btn-sm btn-outline-secondary clear-btn">Clear</button>
                            <button type="button" class="btn btn-sm btn-outline-success save-btn" disabled>Save</button>
                            <button type="button" class="btn btn-sm btn-primary run-btn">Run</button>
                        </div>
                    </div>
                    <div class="card-body p-2 d-flex flex-column">
                        <div class="row g-2 mb-2 small param-block">
                            <div class="col-12">
                                <div class="input-group input-group-sm">
                                    <span class="input-group-text">Script</span>
                                    <input class="form-control script-path" value="@t.ScriptPath" readonly />
                                </div>
                            </div>
                            @if (t.Parameters.Count == 0)
                            {
                                <div class="col-12 text-muted fst-italic">No parameters</div>
                            }
                            else
                            {
                                foreach (var p in t.Parameters)
                                {
                                    <div class="col-md-4 param-row">
                                        <div class="input-group input-group-sm">
                                            <span class="input-group-text" title="@p.Name">@p.Name</span>
                                            <input type="hidden" class="param-name" value="@p.Name" />
                                            <input class="form-control param-value" value="@p.Value" placeholder="value" />
                                        </div>  
                                    </div>
                                }
                            }
                        </div>
                        <div class="small text-muted mb-1">
                            Command: <code class="cmd-preview">(idle)</code>
                        </div>
                        <div class="output-toolbar">
                            <button type="button" class="btn btn-outline-secondary btn-sm copy-btn" title="Copy">Copy</button>
                            <button type="button" class="btn btn-outline-secondary btn-sm clear-btn">Clear</button>
                            <button type="button" class="btn btn-outline-secondary btn-sm wrap-toggle-btn" data-state="on">Wrap: On</button>
                            <button type="button" class="btn btn-outline-secondary btn-sm find-btn">Find</button>
                            <button type="button" class="btn btn-outline-secondary btn-sm scroll-lock-btn" data-locked="false">Scroll Lock Off</button>
                        </div>
                        <!-- Replaced textarea with ANSI-aware pre -->
                        <pre class="output-box ansi-output wrap-on" data-autoscroll="true"></pre>
                        <div class="small text-muted mt-2 status-line">Idle</div>
                    </div>
                </div>
            </div>
        }
    </div>
}

<!-- Add (once) a minimal find modal near bottom of page -->
<div id="outputFindModal" class="position-fixed top-0 start-0 w-100 h-100 d-none"
     style="background:rgba(0,0,0,.4);z-index:1050;">
  <div class="card shadow-sm" style="max-width:420px;margin:12vh auto;padding:.75rem;">
    <div class="d-flex gap-2">
      <input class="form-control form-control-sm find-input" placeholder="Find (regex optional)" />
      <button class="btn btn-sm btn-primary do-find">Find</button>
      <button class="btn btn-sm btn-outline-secondary close-find">Close</button>
    </div>
    <div class="small text-muted mt-2 find-status"></div>
  </div>
</div>

@section Scripts {
<script>
document.addEventListener('DOMContentLoaded', () => {
    const wrapToggle = document.getElementById('wrapToggle');
    const refreshAllBtn = document.getElementById('refreshAllBtn');
    const antiforgery = document.querySelector('input[name="__RequestVerificationToken"]')?.value ?? '';

    function escapeHtml(s){
        return s.replace(/[&<>]/g, c=>({'&':'&amp;','<':'&lt;','>':'&gt;'}[c]));
    }

    // Basic ANSI SGR to HTML span mapper
    function ansiToHtml(input){
        const spans = [];
        let open = [];
        const parts = input.split(/\x1b\[/); // split on ESC[
        let first = parts.shift();
        let html = escapeHtml(first);
        for (const part of parts){
            const m = part.match(/^([0-9;]*)([A-Za-z])(.*)$/s);
            if (!m){ html += escapeHtml(part); continue; }
            let [, codes, cmd, rest] = m;
            if (cmd !== 'm'){ // not SGR
                html += escapeHtml(rest);
                continue;
            }
            if (codes === '') codes = '0';
            const classes = [];
            codes.split(';').forEach(c=>{
                if (c === '' ) c='0';
                const n = parseInt(c,10);
                if (n === 0){ open = []; return; }
                if (n === 1) classes.push('ansi-bold');
                if (n === 2) classes.push('ansi-dim');
                if (n === 3) classes.push('ansi-italic');
                if (n === 4) classes.push('ansi-underline');
                if (n === 7) classes.push('ansi-inverse');
                if (n >=30 && n<=37) classes.push('ansi-fg-' + (n-30));
                if (n === 39) classes.push('ansi-fg-reset');
                if (n >=90 && n<=97) classes.push('ansi-fg-bright-' + (n-90));
                if (n >=40 && n<=47) classes.push('ansi-bg-' + (n-40));
                if (n >=100 && n<=107) classes.push('ansi-bg-bright-' + (n-100));
            });
            open = open.filter(c=>!c.endsWith('-reset'));
            // Build wrapper start tags
            const start = classes.length ? '<span class="' + classes.join(' ') + '">' : '';
            const end = classes.length ? '</span>' : '';
            html += start + escapeHtml(rest) + end;
        }
        return html;
    }

    function buildPreview(card){
        const scriptPath = card.querySelector('.script-path').value.trim();
        const params = Array.from(card.querySelectorAll('.param-row')).map(r=>{
            const name = r.querySelector('.param-name')?.value.trim();
            const val = r.querySelector('.param-value')?.value.trim();
            return name ? `-p ${name}${val ? ' ' + val : ''}` : '';
        }).filter(x=>x);
        card.querySelector('.cmd-preview').textContent = scriptPath + (params.length ? ' ' + params.join(' ') : '');
    }

    function setRunning(card, running){
        const runBtn = card.querySelector('.run-btn');
        runBtn.disabled = running;
        card.querySelector('.status-line').textContent = running ? 'Running...' : 'Idle';
    }

    document.querySelectorAll('.test-card').forEach(card=>{
        const testId = card.dataset.testId;
        const outputEl = card.querySelector('.output-box');
        const statusLine = card.querySelector('.status-line');
        const runBtn = card.querySelector('.run-btn');
        const saveBtn = card.querySelector('.save-btn');
        const clearBtn = card.querySelector('.clear-btn');

        buildPreview(card);

        card.querySelectorAll('.param-value').forEach(inp=>{
            inp.addEventListener('input', () => {
                buildPreview(card);
                saveBtn.disabled = false;
            });
        });

        clearBtn.addEventListener('click', () => {
            outputEl.innerHTML = '';
            statusLine.textContent = 'Cleared';
        });

        runBtn.addEventListener('click', async () => {
            setRunning(card, true);
            const params = Array.from(card.querySelectorAll('.param-row')).map(r => ({
                name: r.querySelector('.param-name')?.value.trim(),
                value: r.querySelector('.param-value')?.value.trim()
            })).filter(p=>p.name);

            try {
                const resp = await fetch('/Test?handler=Run', {
                    method:'POST',
                    headers:{
                        'Content-Type':'application/json',
                        'RequestVerificationToken': antiforgery
                    },
                    body: JSON.stringify({ id: testId, parameters: params })
                });
                const result = await resp.json();
                replaceOutput(outputEl,
`COMMAND: ${result.command}
EXIT CODE: ${result.exitCode}
DURATION: ${result.durationMs.toFixed(1)} ms
SUCCESS: ${result.success}
${result.output ? "\n=== STDOUT ===\n"+result.output : ""}${result.error ? "\n=== STDERR ===\n"+result.error : ""}`);
                statusLine.textContent = result.success ? 'Completed' : 'Completed (errors)';
                outputEl.scrollTop = 0;
            } catch (e) {
                outputEl.textContent = 'ERROR: ' + e.message;
                statusLine.textContent = 'Error';
            } finally {
                setRunning(card, false);
            }
        });

        saveBtn.addEventListener('click', async () => {
            const params = Array.from(card.querySelectorAll('.param-row')).map(r => ({
                name: r.querySelector('.param-name')?.value.trim(),
                value: r.querySelector('.param-value')?.value.trim()
            })).filter(p=>p.name);
            saveBtn.disabled = true;
            statusLine.textContent = 'Saving...';
            try {
                const resp = await fetch('/Test?handler=SaveUserConfig', {
                    method:'POST',
                    headers:{
                        'Content-Type':'application/json',
                        'RequestVerificationToken': antiforgery
                    },
                    body: JSON.stringify({ id: testId, parameters: params })
                });
                statusLine.textContent = resp.ok ? 'Saved overrides' : 'Save failed';
                if (!resp.ok) saveBtn.disabled = false;
            } catch(e){
                statusLine.textContent = 'Save error: ' + e.message;
                saveBtn.disabled = false;
            }
        });

        // Toolbar wiring per card
        card.querySelector('.copy-btn').addEventListener('click',()=>{
            const text = Array.from(outputEl.querySelectorAll('.output-line'))
                .map(l=>l.textContent.replace(/^\d+\s*/,'')).join('\n');
            navigator.clipboard.writeText(text).then(()=>{
                outputEl.classList.add('copy-flash');
                setTimeout(()=>outputEl.classList.remove('copy-flash'),500);
            });
        });
        card.querySelector('.wrap-toggle-btn').addEventListener('click',e=>{
            const btn = e.currentTarget;
            const on = btn.dataset.state === 'on';
            btn.dataset.state = on ? 'off':'on';
            btn.textContent = 'Wrap: ' + (on ? 'Off':'On');
            outputEl.classList.toggle('wrap-on', !on);
            outputEl.classList.toggle('wrap-off', on);
        });
        card.querySelector('.scroll-lock-btn').addEventListener('click',e=>{
            const btn = e.currentTarget;
            const locked = btn.dataset.locked === 'true';
            btn.dataset.locked = (!locked).toString();
            outputEl.dataset.autoscroll = (!locked).toString();
            btn.textContent = 'Scroll Lock ' + (locked ? 'Off':'On');
        });
    });

    wrapToggle.addEventListener('change', () => {
        const ws = wrapToggle.checked ? 'pre-wrap' : 'pre';
        document.querySelectorAll('.output-box').forEach(tb => tb.style.whiteSpace = ws);
    });

    refreshAllBtn.addEventListener('click', () => location.reload());
});

document.addEventListener('DOMContentLoaded', () => {
  const findModal = document.getElementById('outputFindModal');
  const findInput = findModal.querySelector('.find-input');
  const doFindBtn = findModal.querySelector('.do-find');
  const closeFindBtn = findModal.querySelector('.close-find');
  const allOutputs = document.querySelectorAll('.output-box');
  let currentCard = null;
  let currentHighlight = null;

  function highlight(term){
    const regExp = new RegExp(term, 'gi');
    allOutputs.forEach(output=>{
      const text = output.textContent;
      if (!regExp.test(text)) {
        output.innerHTML = escapeHtml(text);
        return;
      }
      const html = text.replace(regExp, (match) => `<mark class="ansi-highlight">${escapeHtml(match)}</mark>`);
      output.innerHTML = html;
    });
  }

  findInput.addEventListener('input', () => {
    const term = findInput.value.trim();
    if (term === '') {
      highlight('');
      return;
    }
    highlight(term);
  });

  doFindBtn.addEventListener('click', () => {
    const term = findInput.value.trim();
    if (term === '') return;
    highlight(term);
  });

  closeFindBtn.addEventListener('click', () => {
    findModal.classList.add('d-none');
    document.body.classList.remove('modal-open');
    currentCard?.scrollIntoView({ behavior: 'smooth' });
    currentCard = null;
  });

  document.querySelectorAll('.find-btn').forEach(btn=>{
    btn.addEventListener('click', function() {
      const card = btn.closest('.test-card');
      findModal.classList.remove('d-none');
      document.body.classList.add('modal-open');
      currentCard = card;
      setTimeout(() => findInput.focus(), 50);
    });
  });
});

function escapeHtml(s){
  return s.replace(/[&<>]/g, c=>({'&':'&amp;','<':'&lt;','>':'&gt;'}[c]));
}

function splitLinesToHtml(raw){
    const lines = raw.replace(/\r\n/g,'\n').split('\n');
    return lines.map((l,i)=>{
        // classify line
        let lvl = 'info';
        if (/error|failed|exception/i.test(l)) lvl='error';
        else if (/warn|deprecated/i.test(l)) lvl='warn';
        else if (/success|completed|ok/i.test(l)) lvl='ok';
        const safe = ansiToHtml(escapeHtml(l));
        return `<span class="output-line" data-idx="${i+1}" data-lvl="${lvl}">
                  <span class="output-line-number">${i+1}</span>${safe}
                </span>`;
    }).join('\n');
}

function appendOutput(outputEl, chunk){
    const atBottom = outputEl.scrollHeight - outputEl.scrollTop - outputEl.clientHeight < 5;
    const html = splitLinesToHtml(chunk);
    outputEl.insertAdjacentHTML('beforeend', html);
    if (outputEl.dataset.autoscroll === 'true' && atBottom){
        outputEl.scrollTop = outputEl.scrollHeight;
    }
}

function replaceOutput(outputEl, full){
    outputEl.innerHTML = splitLinesToHtml(full);
    if (outputEl.dataset.autoscroll === 'true'){
        outputEl.scrollTop = outputEl.scrollHeight;
    }
}

</script>
}